[{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://florale.github.io/multilevelcoda/articles/multilevel-coda.html","id":"getting-compositions-and-isometric-log-ratio-ilr-coordinates-","dir":"Articles","previous_headings":"","what":"Getting compositions and isometric log ratio (ILR) coordinates.","title":"Multilevel Models with Compositional Predictors","text":"uses compilr() function. coordinates used subsequent model predictors","code":"cilr <- compilr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")"},{"path":"https://florale.github.io/multilevelcoda/articles/multilevel-coda.html","id":"multilevel-model-with-compositional-predictors","dir":"Articles","previous_headings":"","what":"Multilevel model with compositional predictors","title":"Multilevel Models with Compositional Predictors","text":"now use output compilr() function brms model, fit using brmcoda() function. summary() model results. Bayesfactor comparison. TODO m1 m0 currently defined.","code":"m <- brmcoda(compilr = cilr,              formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 +                wilr1 + wilr2 + wilr3 + wilr4 + Female + (1 | ID),              chain = 8, cores = 8, iter = 8000, seed = 123,              save_pars = save_pars(all = TRUE),              backend = \"cmdstanr\") #> Compiling Stan program... #> Start sampling summary(m$Model) #>  Family: gaussian  #>   Links: mu = identity; sigma = identity  #> Formula: STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 + wilr1 + wilr2 + wilr3 + wilr4 + Female + (1 | ID)  #>    Data: tmp (Number of observations: 3540)  #>   Draws: 8 chains, each with iter = 8000; warmup = 4000; thin = 1; #>          total post-warmup draws = 32000 #>  #> Group-Level Effects:  #> ~ID (Number of levels: 266)  #>               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(Intercept)     0.99      0.06     0.87     1.11 1.00    11442    17325 #>  #> Population-Level Effects:  #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept     2.64      0.48     1.71     3.57 1.00    10217    17029 #> bilr1         0.11      0.32    -0.51     0.73 1.00     9146    15395 #> bilr2         0.51      0.34    -0.16     1.18 1.00     8964    15316 #> bilr3         0.13      0.21    -0.28     0.55 1.00     9118    16058 #> bilr4         0.00      0.28    -0.55     0.55 1.00     9421    16324 #> wilr1        -0.35      0.12    -0.58    -0.11 1.00    23307    24217 #> wilr2         0.05      0.13    -0.22     0.31 1.00    27142    24311 #> wilr3        -0.11      0.08    -0.26     0.05 1.00    23328    24003 #> wilr4         0.24      0.10     0.04     0.43 1.00    24419    24164 #> Female       -0.38      0.17    -0.72    -0.05 1.00    10664    17649 #>  #> Family Specific Parameters:  #>       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sigma     2.37      0.03     2.31     2.42 1.00    37395    23812 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). ## comparison <- bayesfactor_models(m1$Model, ##                                  denominator = m0$Model) ## comparison"},{"path":"https://florale.github.io/multilevelcoda/articles/multilevel-coda.html","id":"substitution-model","dir":"Articles","previous_headings":"","what":"Substitution model","title":"Multilevel Models with Compositional Predictors","text":"ease presentation, show \\(\\pm5\\) minute substitution results, full dataset contain similar results 1, 2, etc. minute substitutions. Results can plotted see patterns easily. plot chunk mlmcoda-wstresstst ease presentation, show \\(\\pm5\\) minute substitution results, full dataset contain similar results 1, 2, etc. minute substitutions. plot chunk mlmcoda-bstresstst","code":"# Within-person substitution registerDoFuture() plan(multisession, workers = 5) wsubm <- wsub(objec = m, substitute = psub, minute = 5, summary = TRUE) knitr::kable(wsubm$TST[abs(MinSubstituted) == 5]) plotsub(data = wsubm$TST, x = \"stress\", y = \"sleep\") bsubm <- bsub(objec = m, substitute = psub, minute = 5, summary = TRUE)  knitr::kable(bsubm$TST[abs(MinSubstituted) == 5]) plotsub(data = bsubm$TST, x = \"stress\", y = \"sleep\")"},{"path":"https://florale.github.io/multilevelcoda/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Flora Le. Author, maintainer. Joshua F. Wiley. Author.","code":""},{"path":"https://florale.github.io/multilevelcoda/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Le F, Wiley J (2022). multilevelcoda: Estimate present multilevel compositional data analysis (CoDA). https://florale.github.io/multilevelcoda/, https://github.com/florale/multilevelcoda.","code":"@Manual{,   title = {multilevelcoda: Estimate and present multilevel compositional data analysis (CoDA)},   author = {Flora Le and Joshua F. Wiley},   year = {2022},   note = {https://florale.github.io/multilevelcoda/, https://github.com/florale/multilevelcoda}, }"},{"path":"https://florale.github.io/multilevelcoda/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"multilevelcoda","text":"package functions support estimating presenting compositional data analysis (CoDA) multilevel models. supports compositional data outcome using multivariate models compositional data predictors multilevel outcomes.","code":""},{"path":"https://florale.github.io/multilevelcoda/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"multilevelcoda","text":"latest, development version, can use remotes package install GitHub: remotes package installed, can install CRAN using code first running code install multilevelcoda Release multilevelcoda CRAN planned later date.","code":"remotes::install_github(\"florale/multilevelcoda\") install.packages(\"remotes\")"},{"path":"https://florale.github.io/multilevelcoda/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn More","title":"multilevelcoda","text":"can see examples learn package vignettes: Multilevel CoDA COMING SOON!","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Bayesian generalised (non-)linear multilevel compositional model\nvia full Bayesian inference using brms, — brmcoda","title":"Fit Bayesian generalised (non-)linear multilevel compositional model\nvia full Bayesian inference using brms, — brmcoda","text":"function fits brm model multilevel ILR coordinates.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Bayesian generalised (non-)linear multilevel compositional model\nvia full Bayesian inference using brms, — brmcoda","text":"","code":"brmcoda(formula, compilr, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Bayesian generalised (non-)linear multilevel compositional model\nvia full Bayesian inference using brms, — brmcoda","text":"formula object class formula, brmsformula: symbolic description model fitted. Details model specification can found brmsformula. compilr compilr object containing data composition, ILR coordinates, variables used model. ... arguments passed brm.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Bayesian generalised (non-)linear multilevel compositional model\nvia full Bayesian inference using brms, — brmcoda","text":"list two elements CompIlr object class compilr used brm model. Model object class brmsfit, contains posterior draws along many useful information model.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Bayesian generalised (non-)linear multilevel compositional model\nvia full Bayesian inference using brms, — brmcoda","text":"","code":"if (FALSE) { data(mcompd) data(sbp) cilr <- compilr(data = mcompd, sbp = sbp, parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  # inspects ILRs before passing to brmcoda names(cilr$BetweenILR) names(cilr$WithinILR) names(cilr$TotalILR)  # model with compositional predictor at between and within-person levels m1 <- brmcoda(compilr = cilr,               formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 + wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),               chain = 1, iter = 500)  # model with compositional outcome   m2 <- brmcoda(compilr = cilr,                formula = mvbind(ilr1, ilr2, ilr3, ilr4) ~ STRESS + Female + (1 | ID),              chain = 1, iter = 500)                  }"},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":null,"dir":"Reference","previous_headings":"","what":"Between-person Substitution Model. — bsub","title":"Between-person Substitution Model. — bsub","text":"Estimate difference outcomes compositional variables substituted specific time period within-person level. resulting bsub encapsulates substitution estimation across compositional variables present brmcoda object. Notes: reference composition substitution model compositional mean dataset provided. average marginal effect, consider using bsubmargins.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Between-person Substitution Model. — bsub","text":"","code":"bsub(object, substitute, minute = 60L, regrid = NULL, summary = FALSE, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Between-person Substitution Model. — bsub","text":"object fitted brmcoda object. substitute data.frame data.table possible substitution variables. dataset can computed using function possub. Required. minute integer numeric value indicating maximum minute substitution model desired. Default 60L (.e., model loops 1:60L minutes). regrid non-NULL, data.table reference grid consisting combinations covariates predictions made. Otherwise, reference grid constructed via ref_grid. summary logical value. estimated marginal means level reference grid (FALSE) average (TRUE) returned? Default FALSE. ... Additional arguments passed describe_posterior.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Between-person Substitution Model. — bsub","text":"list results ","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Between-person Substitution Model. — bsub","text":"","code":"# \\donttest{ data(mcompd) data(sbp) data(psub) data(\"adjusted-brmcoda\") #> Warning: data set ‘adjusted-brmcoda’ not found cilr <- compilr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")                  testbs <- bsub(object = adjm, substitute = psub, minute = 5) #> Error in isFALSE(inherits(object, \"brmcoda\")): object 'adjm' not found  ## cleanup rm(bsubtest, mcompd) #> Warning: object 'bsubtest' not found #> Warning: object 'mcompd' not found # }"},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating Average Marginal Effects for Between-person Substitution Model. — bsubmargins","title":"Estimating Average Marginal Effects for Between-person Substitution Model. — bsubmargins","text":"Using fitted model object, estimates average marginal difference outcomes compositional variables substituted specific period -person level. resulting bsubmargins encapsulates substitution estimation across compositional variables present brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating Average Marginal Effects for Between-person Substitution Model. — bsubmargins","text":"","code":"bsubmargins(object, substitute, minute = 60L, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating Average Marginal Effects for Between-person Substitution Model. — bsubmargins","text":"object brmcoda object. substitute data.frame data.table possible substitution variables. dataset can computed using function possub. Required. minute integer numeric value indicating maximum minute substitution model desired. Default 60L (.e., model loops 1:60L minutes). ... Additional arguments passed describe_posterior.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating Average Marginal Effects for Between-person Substitution Model. — bsubmargins","text":"list containing result isotemporal multilevel substitution model. elements list substitution estimation compositional variables, include least six core items. Mean Posterior means. CI_low CI_high 95% credible intervals. MinSubstituted Minute substituted within composition. SubstituteCompositional variables substituted /. PredictorCentral compositional variable substituted /.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating Average Marginal Effects for Between-person Substitution Model. — bsubmargins","text":"","code":"if (FALSE) { data(psub) data(mcompd) data(psub) cilr <- compilr(data = mcompd[ID %in% 1:10, .SD[1:3], by = ID], sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  m <- brmcoda(compilr = cilr,               formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 + wilr1 +               wilr2 + wilr3 + wilr4 + Female + (1 | ID), chains = 1, iter = 500)                 x <- bsubmargins(object = m, substitute = psub, minute = 5) }"},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute useful indices from a (dataset of) multilevel composition(s) — compilr","title":"Compute useful indices from a (dataset of) multilevel composition(s) — compilr","text":"Computes sets compositions IRLs Multilevel Compositional Data models.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute useful indices from a (dataset of) multilevel composition(s) — compilr","text":"","code":"compilr(data, sbp, parts, total = 1440, idvar = \"ID\")"},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute useful indices from a (dataset of) multilevel composition(s) — compilr","text":"data data.frame data.table containing data variables used analysis. must include composition ID variable. Required. sbp signary matrix indicating sequential binary partition. Required. parts character vector specifying names compositional variables used. total numeric value total amount compositions closed. Default 1440. idvar character string specifying name variable containing IDs. Default ID.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute useful indices from a (dataset of) multilevel composition(s) — compilr","text":"list twelve elements. BetweenComp vector class acomp representing one closed -person composition matrix class acomp representing multiple closed -person compositions one row. WithinComp vector class acomp representing one closed within-person composition matrix class acomp representing multiple closed within-person compositions one row. TotalComp vector class acomp representing one closed total composition matrix class acomp representing multiple closed total compositions one row. BetweenILR Isometric log ratio transform -person composition. WithinILR Isometric log ratio transform within-person composition. TotalILR Isometric log ratio transform total composition. data user's dataset imputed dataset input data contains zeros. psi ILR matrix associated user-defined partition structure. sbp user-defined sequential binary partition matrix. parts Names compositional variables. idvar Name variable containing IDs. total Total amount compositions closed.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute useful indices from a (dataset of) multilevel composition(s) — compilr","text":"","code":"## Example 1 - Dataset with no 0 data(mcompd) data(sbp) cilr1 <- compilr(data = mcompd, sbp = sbp,                   parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\") str(cilr1) #> List of 12 #>  $ BetweenComp: 'acomp' num [1:3540, 1:5] 0.3432 0.3432 0.3432 0.3432 0.3432 0.0501 0.0501 0.0501 0.0501 0.0501 0.1731 0.1731 0.1731 0.1731 0.1731 0.3499 0| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"BTST\" \"BWAKE\" \"BMVPA\" \"BLPA\" ... #>  $ WithinComp : 'acomp' num [1:3540, 1:5] 0.2231 0.1962 0.1234 0.195 0.2578 0.2787 0.1449 0.1284 0.192 0.2333 0.2426 0.0996 0.4416 0.1903 0.0878 0.1856 0.2| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"WTST\" \"WWAKE\" \"WMVPA\" \"WLPA\" ... #>  $ TotalComp  : 'acomp' num [1:3540, 1:5] 0.3766 0.3181 0.1879 0.3649 0.452 0.0687 0.0343 0.0286 0.0525 0.0598 0.2066 0.0814 0.3394 0.1796 0.0776 0.3194 0.| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ BetweenILR : 'rmult' num [1:3540, 1:4] -0.29534 -0.29534 -0.29534 -0.29534 -0.29534 1.36014 1.36014 1.36014 1.36014 1.36014 0.00961 0.00961 0.00961 0.00| __truncated__ ... #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.3432 0.3432 0.3432 0.3432 0.3432 0.0501 0.0501 0.0501 0.0501 0.0501 0.1731 0.1731 0.1731 0.1731 0.1731 0.3499 0| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>   ..- attr(*, \"V\")= num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"bilr1\" \"bilr2\" \"bilr3\" \"bilr4\" #>  $ WithinILR  : 'rmult' num [1:3540, 1:4] 0.5822 -0.177 -0.1904 -0.0204 0.5006 -0.1573 0.2142 -0.028 0.0112 0.0705 0.6174 -0.8432 1.3248 -0.0428 -0.6989 0.| __truncated__ ... #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.2231 0.1962 0.1234 0.195 0.2578 0.2787 0.1449 0.1284 0.192 0.2333 0.2426 0.0996 0.4416 0.1903 0.0878 0.1856 0.2| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>   ..- attr(*, \"V\")= num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"wilr1\" \"wilr2\" \"wilr3\" \"wilr4\" #>  $ TotalILR   : 'rmult' num [1:3540, 1:4] 0.2869 -0.4724 -0.4858 -0.3157 0.2053 1.2029 1.5743 1.3321 1.3713 1.4307 0.627 -0.8336 1.3344 -0.0332 -0.6893 1.7| __truncated__ ... #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.3766 0.3181 0.1879 0.3649 0.452 0.0687 0.0343 0.0286 0.0525 0.0598 0.2066 0.0814 0.3394 0.1796 0.0776 0.3194 0.| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>   ..- attr(*, \"V\")= num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"ilr1\" \"ilr2\" \"ilr3\" \"ilr4\" #>  $ data       :Classes ‘data.table’ and 'data.frame':\t3540 obs. of  9 variables: #>   ..$ TST   : num [1:3540] 494 494 494 494 494 ... #>   ..$ WAKE  : num [1:3540] 72.2 72.2 72.2 72.2 72.2 ... #>   ..$ MVPA  : num [1:3540] 249 249 249 249 249 ... #>   ..$ LPA   : num [1:3540] 504 504 504 504 504 ... #>   ..$ SB    : num [1:3540] 120 120 120 120 120 ... #>   ..$ ID    : int [1:3540] 185 185 185 185 185 185 185 185 185 185 ... #>   ..$ Age   : num [1:3540] 29.7 29.7 29.7 29.7 29.7 ... #>   ..$ Female: num [1:3540] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ STRESS: num [1:3540] 3.67 7.21 2.84 1.51 7.75 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ psi        : num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>  $ sbp        : num [1:4, 1:5] 1 1 0 0 1 -1 0 0 -1 0 ... #>  $ parts      : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ idvar      : chr \"ID\" #>  $ total      : num 1440 #>  - attr(*, \"class\")= chr \"compilr\"  ## cleanup rm(cilr1, mcompd, sbp) #> Warning: object 'mcompd' not found #> Warning: object 'sbp' not found"},{"path":"https://florale.github.io/multilevelcoda/reference/emmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimated marginal means of composition. — emmcoda","title":"Estimated marginal means of composition. — emmcoda","text":"function obtains estimated marginal means (EMMs) models containing composition outcome sample posterior distribution regression coefficients.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/emmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimated marginal means of composition. — emmcoda","text":"","code":"emmcoda(object, x = NULL, at = NULL, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/emmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimated marginal means of composition. — emmcoda","text":"object fitted mvmcoda model data. Required. x character vector specifying names predictors EMMs desired. NULL, average predictionu returned. Default NULL. numeric value, vector list passed ref_grid specifying predictor's values EMMs. ... Additional arguments passed describe_posterior.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/emmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimated marginal means of composition. — emmcoda","text":"list four elements.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/mcompd.html","id":null,"dir":"Reference","previous_headings":"","what":"Multilevel Compositional Data — mcompd","title":"Multilevel Compositional Data — mcompd","text":"simulated dataset containing multiple days compositional data.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/mcompd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multilevel Compositional Data — mcompd","text":"","code":"mcompd"},{"path":"https://florale.github.io/multilevelcoda/reference/mcompd.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Multilevel Compositional Data — mcompd","text":"data table containing 9 variables. TST Total Sleep Time (minutes) --- repeated measure WAKE Wake time bed, trying sleep (minutes) --- repeated measure MVPA Moderate Vigorous Physical Activity (minutes) --- repeated measure LPA Light Physical Activity (minutes) --- repeated measure SB Sedentary Behavior (minutes) --- repeated measure ID unique identifier individual Age Age years --- baseline measure Female Binary: whether participants identified female (1) (0) --- baseline measure STRESS Self report stress measures 0 10 scale --- repeated measure","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/mvcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"A series of functions for single level multivariate compositional models — mvcoda","title":"A series of functions for single level multivariate compositional models — mvcoda","text":"Fit Bayesian generalised (non-)linear multivariate compositional model via full Bayesian inference using Stan, composition outcome.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/mvcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A series of functions for single level multivariate compositional models — mvcoda","text":"","code":"mvcoda(data, formula, sbp, parts, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/mvcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A series of functions for single level multivariate compositional models — mvcoda","text":"data data.frame data.table containing data variables used analysis. must include composition ID variable. Required. formula object class brmsformula, mvbrmsformula: symbolic description model fitted. sbp signary matrix indicating sequential binary partition. Required. Details model specification can found mvbrmsformula. parts character vector specifying names compositional variables. Required. ... arguments passed brm.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/mvcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A series of functions for single level multivariate compositional models — mvcoda","text":"list results. TODO","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/mvcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A series of functions for single level multivariate compositional models — mvcoda","text":"","code":"data(mcompd) data(sbp) ## run mvcoda mv <- mvcoda(mcompd, mvbind(ilr1, ilr2, ilr3, ilr4) ~ STRESS + Age + Female,               sbp, c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\")) #> Setting 'rescor' to TRUE by default for this model #> Warning: In the future, 'rescor' will be set to FALSE by default for all models. It is thus recommended to explicitely set 'rescor' via 'set_rescor' instead of using the default. #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL 'dda3c48844ac42a80ce1fbb4c1f43ccc' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.00444 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 44.4 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 75.0101 seconds (Warm-up) #> Chain 1:                54.9452 seconds (Sampling) #> Chain 1:                129.955 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'dda3c48844ac42a80ce1fbb4c1f43ccc' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.003376 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 33.76 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 73.4882 seconds (Warm-up) #> Chain 2:                49.6313 seconds (Sampling) #> Chain 2:                123.12 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'dda3c48844ac42a80ce1fbb4c1f43ccc' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.003389 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 33.89 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 74.6804 seconds (Warm-up) #> Chain 3:                53.1917 seconds (Sampling) #> Chain 3:                127.872 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'dda3c48844ac42a80ce1fbb4c1f43ccc' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.003374 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 33.74 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 75.7418 seconds (Warm-up) #> Chain 4:                53.2503 seconds (Sampling) #> Chain 4:                128.992 seconds (Total) #> Chain 4:"},{"path":"https://florale.github.io/multilevelcoda/reference/plotemmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal effects of composition plot — plotemmc","title":"Marginal effects of composition plot — plotemmc","text":"function useful visualising estimated changes compositional outcome variable associated specific change independent variable.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/plotemmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal effects of composition plot — plotemmc","text":"","code":"plotemmc(data, x, y, font = \"serif\", ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/plotemmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal effects of composition plot — plotemmc","text":"data emmcoda object use plot. x character string specifying name predictor variable. y character string specifying name compositional outcome variable. font character string specifying name user's preferred font. Default serif choose serif font available system. ... arguments passed ggplot.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/plotemmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Marginal effects of composition plot — plotemmc","text":"ggplot graph object showing estimated change compositional outcome associated changes predictor.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/plotemmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marginal effects of composition plot — plotemmc","text":"","code":"data(mcompd)"},{"path":"https://florale.github.io/multilevelcoda/reference/plotsub.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitution plot — plotsub","title":"Substitution plot — plotsub","text":"function useful visualising estimated differences outcomes compositional variables substituted specific period time.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/plotsub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitution plot — plotsub","text":"","code":"plotsub(data, x, y, font = \"serif\", ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/plotsub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitution plot — plotsub","text":"data dataset use plot. must component list resulted one following functions: wsub, bsub, wsubmargins, bsubmargins. x character string specifying name compostional predictor variable. y character string specifying name outcome variable. font character string specifying name user's preferred font. Default serif choose serif font available system. ... arguments passed ggplot.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/plotsub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitution plot — plotsub","text":"ggplot graph object showing estimated difference outcome pair compositional variables substituted specific time.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/possub.html","id":null,"dir":"Reference","previous_headings":"","what":"Possible Pairwise Substitution — possub","title":"Possible Pairwise Substitution — possub","text":"Makes dataset possible pairwise substitution composition.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/possub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Possible Pairwise Substitution — possub","text":"","code":"possub(parts)"},{"path":"https://florale.github.io/multilevelcoda/reference/possub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Possible Pairwise Substitution — possub","text":"parts character vector specifying names compositional variables used.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/possub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Possible Pairwise Substitution — possub","text":"data table possible pairwise substitution.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/possub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Possible Pairwise Substitution — possub","text":"","code":"data(mcompd)  ps <- possub(parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\")) ps2 <- possub(c(\"WAKE\", \"MVPA\", \"LPA\", \"SB\"))  print(ps2) #>     WAKE MVPA LPA SB #>  1:    1   -1   0  0 #>  2:    1    0  -1  0 #>  3:    1    0   0 -1 #>  4:   -1    1   0  0 #>  5:    0    1  -1  0 #>  6:    0    1   0 -1 #>  7:   -1    0   1  0 #>  8:    0   -1   1  0 #>  9:    0    0   1 -1 #> 10:   -1    0   0  1 #> 11:    0   -1   0  1 #> 12:    0    0  -1  1  ## cleanup rm(mcompd, ps1, ps2) #> Warning: object 'mcompd' not found #> Warning: object 'ps1' not found"},{"path":"https://florale.github.io/multilevelcoda/reference/psub.html","id":null,"dir":"Reference","previous_headings":"","what":"Possible Pairwise Substitutions — psub","title":"Possible Pairwise Substitutions — psub","text":"dataset containing possible pairwise subsitutions.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/psub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Possible Pairwise Substitutions — psub","text":"","code":"psub"},{"path":"https://florale.github.io/multilevelcoda/reference/psub.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Possible Pairwise Substitutions — psub","text":"data table containing 5 variables. V1 first compositional variable V2 second compositional variable V3 third compositional variable V4 fourth compositional variable V5 fifth compositional variable","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/sbp.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential Binary Partition — sbp","title":"Sequential Binary Partition — sbp","text":"matrix sequential binary partition.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/sbp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential Binary Partition — sbp","text":"","code":"sbp"},{"path":"https://florale.github.io/multilevelcoda/reference/sbp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sequential Binary Partition — sbp","text":"matrix 5 columns 4 rows. V1 first compositional variable V2 second compositional variable V3 third compositional variable V4 fourth compositional variable V5 fifth compositional variable","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/subcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"A series of functions for single level compositional models — subcoda","title":"A series of functions for single level compositional models — subcoda","text":"function first computes composition ILR coordinates, fits Bayesian single-level compositional model compositional predictors users' choices outcomes covariates, finally estimates average marginal effects isotemporal compositional substitution model.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/subcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A series of functions for single level compositional models — subcoda","text":"","code":"subcoda(data, sbp, parts, substitute, formula, minute = 60, total = 1440, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/subcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A series of functions for single level compositional models — subcoda","text":"data data.frame data.table containing data variables used analysis. sbp signary matrix indicating sequential binary partition. parts character vector specifying names compositional variables. substitute data.frame data.table possible substitution variables. dataset can computed using function possub. formula object class formula, brmsformula: symbolic description model fitted. minute integer numeric value indicating maximum minute substitution model desired. Default 60L (.e., model loops 1:60L minutes). total numeric value total amount compositions closed. Default 1440. ... arguments passed brm.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/subcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A series of functions for single level compositional models — subcoda","text":"list seven elements. BrmsModel object class brmsfit, contains posterior draws along many useful information model. SubstitutionResults list containing result isotemporal substitution model. ILR Isometric log ratio transform composition. CompA vector class acomp representing one composition matrix class acomp representing multiple closed compositions one row. data user's dataset imputed dataset input data contains zeros. sbp user-defined sequential binary partition matrix. parts Names compositional variables.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/tinycompilr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute useful indices from a (dataset of) single-level composition(s) — tinycompilr","title":"Compute useful indices from a (dataset of) single-level composition(s) — tinycompilr","text":"Compute useful indices (dataset ) single-level composition(s)","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/tinycompilr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute useful indices from a (dataset of) single-level composition(s) — tinycompilr","text":"","code":"tinycompilr(data, sbp, parts, total = 1440)"},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":null,"dir":"Reference","previous_headings":"","what":"Within-person Substitution Model — wsub","title":"Within-person Substitution Model — wsub","text":"Estimate difference outcomes compositional variables substituted specific time period within-person level. resulting wsub encapsulates substitution estimation across compositional variables present brmcoda object. Notes: reference composition substitution model compositional mean dataset provided. average marginal effect, consider using wsubmargins.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Within-person Substitution Model — wsub","text":"","code":"wsub(object, substitute, minute = 60L, regrid = NULL, summary = FALSE, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Within-person Substitution Model — wsub","text":"object brmcoda object. substitute data.frame data.table possible substitution variables. dataset can computed using function possub. Required. minute integer numeric value indicating maximum minute substitution model desired. Default 60L (.e., model loops 1:60L minutes). regrid non-NULL, data.table reference grid consisting combinations covariates predictions made. Otherwise, reference grid constructed via ref_grid. summary logical value. estimated marginal means level reference grid (FALSE) average (TRUE) returned? Default FALSE. ... Additional arguments passed describe_posterior.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Within-person Substitution Model — wsub","text":"list results substitution models compositional variables.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Within-person Substitution Model — wsub","text":"","code":"## Please see ?multilevelcoda::bsub for an example. #testws <- wsub(substitute = ps, minute = 5)"},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating Average Marginal Effects for Within-person Substitution Model. — wsubmargins","title":"Estimating Average Marginal Effects for Within-person Substitution Model. — wsubmargins","text":"Using fitted model object, estimates average marginal difference outcomes compositional variables substituted specific period within-person level. resulting wsubmargins encapsulates substitution estimation across compositional variables present brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating Average Marginal Effects for Within-person Substitution Model. — wsubmargins","text":"","code":"wsubmargins(object, substitute, minute = 60, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating Average Marginal Effects for Within-person Substitution Model. — wsubmargins","text":"object brmcoda object. Required. substitute data.frame data.table possible substitution variables. dataset can computed using function possub. Required. minute integer numeric value indicating maximum minute substitution model desired. Default 60L (.e., model loops 1:60L minutes). ... Additional arguments passed describe_posterior.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating Average Marginal Effects for Within-person Substitution Model. — wsubmargins","text":"list containing result isotemporal multilevel substitution model. elements list substitution estimation compositional variable.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating Average Marginal Effects for Within-person Substitution Model. — wsubmargins","text":"","code":"data(sbp) data (mcompd)  ps <- possub(parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"))  library(doFuture) #> Loading required package: foreach #> Loading required package: future registerDoFuture() plan(multisession, workers = 5) system.time(testwsm <- wsubmargins(object = adjm, substitute = ps, minute = 2)) #> Error in isFALSE(inherits(object, \"brmcoda\")): object 'adjm' not found #> Timing stopped at: 0 0 0"},{"path":"https://florale.github.io/multilevelcoda/news/index.html","id":"multilevelcoda-009000","dir":"Changelog","previous_headings":"","what":"multilevelcoda 0.0.9000","title":"multilevelcoda 0.0.9000","text":"Initial release","code":""}]
