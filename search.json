[{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/articles/comp-outcome.html","id":"computing-compositions-and-isometric-log-ratio-coordinates-","dir":"Articles","previous_headings":"Multilevel model with compositional outcomes.","what":"Computing compositions and isometric log ratio coordinates.","title":"Multilevel Model with Compositional Outcomes","text":"ILR coordinates outcomes can calculated using compilr() functions.","code":"cilr <- compilr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  head(cilr$TotalILR) #>        ilr1 ilr2    ilr3  ilr4 #> [1,]  0.287 1.20  0.6270 1.702 #> [2,] -0.472 1.57 -0.8336 0.984 #> [3,] -0.486 1.33  1.3344 2.659 #> [4,] -0.316 1.37 -0.0332 0.551 #> [5,]  0.205 1.43 -0.6893 0.733 #> [6,] -0.446 1.16 -0.0950 0.670"},{"path":"https://florale.github.io/multilevelcoda/articles/comp-outcome.html","id":"fitting-model","dir":"Articles","previous_headings":"Multilevel model with compositional outcomes.","what":"Fitting model","title":"Multilevel Model with Compositional Outcomes","text":"model multilevel compositional outcomes multivariate, multiple ILR coordinate outcomes,predicted set predictors. brms model can fitted using brmcoda() function. summary() model. can see stress significantly predicted ilr1 ilr2.","code":"mv <- brmcoda(compilr = cilr,               formula = mvbind(ilr1, ilr2, ilr3, ilr4) ~ STRESS + (1 | ID),               cores = 8, seed = 123, backend = \"cmdstanr\") #> Warning: In the future, 'rescor' will be set to FALSE by default for all models. It is thus #> recommended to explicitely set 'rescor' via 'set_rescor' instead of using the default. #> Warning: CmdStan's precompiled header (PCH) files may need to be rebuilt. #> If your model failed to compile please run rebuild_cmdstan(). #> If the issue persists please open a bug report. #> Error: An error occured during compilation! See the message above for more information. summary(mv$Model) #>  Family: MV(gaussian, gaussian, gaussian, gaussian)  #>   Links: mu = identity; sigma = identity #>          mu = identity; sigma = identity #>          mu = identity; sigma = identity #>          mu = identity; sigma = identity  #> Formula: ilr1 ~ STRESS + (1 | ID)  #>          ilr2 ~ STRESS + (1 | ID)  #>          ilr3 ~ STRESS + (1 | ID)  #>          ilr4 ~ STRESS + (1 | ID)  #>    Data: tmp (Number of observations: 3540)  #>   Draws: 8 chains, each with iter = 6000; warmup = 1000; thin = 1; #>          total post-warmup draws = 40000 #>  #> Group-Level Effects:  #> ~ID (Number of levels: 266)  #>                    Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(ilr1_Intercept)     0.33      0.02     0.30     0.37 1.00    13574    21989 #> sd(ilr2_Intercept)     0.30      0.02     0.28     0.34 1.00    11200    19827 #> sd(ilr3_Intercept)     0.39      0.02     0.35     0.43 1.00    17013    24936 #> sd(ilr4_Intercept)     0.30      0.02     0.27     0.33 1.00    16596    25482 #>  #> Population-Level Effects:  #>                Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> ilr1_Intercept    -0.43      0.02    -0.48    -0.39 1.00    11069    19841 #> ilr2_Intercept     1.47      0.02     1.42     1.51 1.00     9583    18405 #> ilr3_Intercept    -0.87      0.03    -0.93    -0.81 1.00    17975    27392 #> ilr4_Intercept     0.65      0.02     0.60     0.69 1.00    18563    26992 #> ilr1_STRESS       -0.01      0.00    -0.02    -0.00 1.00    64970    35109 #> ilr2_STRESS        0.01      0.00     0.00     0.01 1.00    56689    36287 #> ilr3_STRESS        0.00      0.01    -0.01     0.01 1.00    67676    33111 #> ilr4_STRESS        0.01      0.00    -0.00     0.01 1.00    62003    35093 #>  #> Family Specific Parameters:  #>            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sigma_ilr1     0.44      0.01     0.43     0.45 1.00    57828    33519 #> sigma_ilr2     0.38      0.00     0.37     0.39 1.00    59436    34195 #> sigma_ilr3     0.70      0.01     0.68     0.71 1.00    52722    34899 #> sigma_ilr4     0.53      0.01     0.51     0.54 1.00    52690    33648 #>  #> Residual Correlations:  #>                   Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> rescor(ilr1,ilr2)    -0.54      0.01    -0.57    -0.52 1.00    57259    33739 #> rescor(ilr1,ilr3)    -0.18      0.02    -0.21    -0.14 1.00    56781    34166 #> rescor(ilr2,ilr3)    -0.05      0.02    -0.09    -0.02 1.00    56093    32472 #> rescor(ilr1,ilr4)     0.11      0.02     0.07     0.14 1.00    56993    31275 #> rescor(ilr2,ilr4)    -0.05      0.02    -0.08    -0.01 1.00    54469    33148 #> rescor(ilr3,ilr4)     0.56      0.01     0.54     0.58 1.00    53173    34399 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://florale.github.io/multilevelcoda/articles/comp-outcome.html","id":"bayes-factor-for-compositional-multilevel-modelling","dir":"Articles","previous_headings":"","what":"Bayes Factor for compositional multilevel modelling","title":"Multilevel Model with Compositional Outcomes","text":"often interested whether predictor significantly predict overall composition, addition individual ILR coordinates. Bayesian, can done comparing marginal likelihoods two models. Bayes Factors (BFs) indices relative evidence one model another. context compositional multilevel modelling, Bayes Factors provide two main useful functions: Testing single parameters within model Comparing models can utilize Bayes factors answer following question: “model (.e., set composition predictors, expressed ILRs) likely produced observed data?” Let’s examine whether stress predicts overall sleep-wake composition. Note: use Bayes factors, brmsfit models must fitted additional non-default argument save_pars = save_pars(= TRUE). can now compare models bayesfactor_models() function \\(BF\\) < 1, data favours intercept model, showing insufficient evidence stress predicting overall sleep-wake composition. Bayes factors provide intuitive measure strength evidence one model among different models. Check bayestestR packages several useful functions related BFs.","code":"# intercept only mv0 <- brmcoda(compilr = cilr,                formula = mvbind(ilr1, ilr2, ilr3, ilr4) ~ 1 + (1 | ID),                iter = 6000, chains = 8, cores = 8, seed = 123, warmup = 1000,                backend = \"cmdstanr\", save_pars = save_pars(all = TRUE)) #> Warning: In the future, 'rescor' will be set to FALSE by default for all models. It is thus #> recommended to explicitely set 'rescor' via 'set_rescor' instead of using the default. #> Warning: CmdStan's precompiled header (PCH) files may need to be rebuilt. #> If your model failed to compile please run rebuild_cmdstan(). #> If the issue persists please open a bug report. #> Error: An error occured during compilation! See the message above for more information. # full model mv <- brmcoda(compilr = cilr,               formula = mvbind(ilr1, ilr2, ilr3, ilr4) ~ STRESS + (1 | ID),               iter = 6000, chains = 8, cores = 8, seed = 123, warmup = 1000,               backend = \"cmdstanr\", save_pars = save_pars(all = TRUE)) #> Warning: In the future, 'rescor' will be set to FALSE by default for all models. It is thus recommended to explicitely set 'rescor' via 'set_rescor' instead of using the default.  #> Warning: CmdStan's precompiled header (PCH) files may need to be rebuilt. #> If your model failed to compile please run rebuild_cmdstan(). #> If the issue persists please open a bug report. #> Error: An error occured during compilation! See the message above for more information. comparison <- bayesfactor_models(mv$Model, denominator = mv0$Model) comparison #> Bayes Factors for Model Comparison #>  #>     Model       BF #> [1]       2.90e-05 #>  #> * Against Denominator: [2] #> *   Bayes Factor Type: marginal likelihoods (bridgesampling)"},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/articles/comp-predictor.html","id":"compositions-and-isometric-log-ratio-ilr-coordinates-","dir":"Articles","previous_headings":"Multilevel model with compositional predictors","what":"Compositions and isometric log ratio (ILR) coordinates.","title":"Multilevel Models with Compositional Predictors","text":"Compositional data often expressed set isometric log ratio (ILR) coordinates regression models. can use compilr() function calculate - within-level ILR coordinates use subsequent models predictors. Notes: compilr() also calculates total ILR coordinates used outcomes (predictors) models, decomposition - within-level ILR coordinates desired. compilr() function multilevel data requires four arguments:","code":"cilr <- compilr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")"},{"path":"https://florale.github.io/multilevelcoda/articles/comp-predictor.html","id":"fitting-model","dir":"Articles","previous_headings":"Multilevel model with compositional predictors","what":"Fitting model","title":"Multilevel Models with Compositional Predictors","text":"now use output compilr() fit brms model, using brmcoda(). model predicting STRESS - within-person sleep-wake behaviours (expressed ILR coordinates). Notes: make sure pass correct names ILR coordinates brms model. summary() model results. Results show first forth within-person ILR coordinate associated stress. interpretation outputs depends construct sequential binary partition. built-sequential binary partition sbp (shown previously), resulting interpretation follows: Due nature within-person ILR coordinates, often challenging interpret results great details. example, significant coefficient wilr1 shows within-person change sleep behaviours (sleep duration time awake bed combined), relative wake behaviours (moderate vigorous physical activity, light physical activity, sedentary behaviour) given day, associated stress. However, several behaviours involved coordinate, don’t know within-person change drives association. change sleep, people sleep average given day, also change time awake. , don’t know specific changes time spent across behaviours. , people slept , behaviour spend less time ? One approach gain insights relationships, changes outcomes associated changes specific time across compositionl components substitution model. discuss substitution model later vignette.","code":"m <- brmcoda(compilr = cilr,              formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 +                wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),              cores = 8, seed = 123, backend = \"cmdstanr\") #> Warning: CmdStan's precompiled header (PCH) files may need to be rebuilt. #> If your model failed to compile please run rebuild_cmdstan(). #> If the issue persists please open a bug report. #> Error: An error occured during compilation! See the message above for more information. summary(m$Model) #> Warning: Parts of the model have not converged (some Rhats are > 1.05). Be careful when #> analysing the results! We recommend running more iterations and/or setting stronger priors. #>  Family: gaussian  #>   Links: mu = identity; sigma = identity  #> Formula: STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 + wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID)  #>    Data: tmp (Number of observations: 3540)  #>   Draws: 1 chains, each with iter = 500; warmup = 250; thin = 1; #>          total post-warmup draws = 250 #>  #> Group-Level Effects:  #> ~ID (Number of levels: 266)  #>               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(Intercept)     0.99      0.07     0.87     1.12 1.00      112      183 #>  #> Population-Level Effects:  #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept     2.51      0.45     1.70     3.42 1.06       49      125 #> bilr1         0.20      0.30    -0.45     0.75 1.11       10       71 #> bilr2         0.44      0.30    -0.28     0.89 1.12        8       99 #> bilr3         0.12      0.22    -0.29     0.51 1.01       81      175 #> bilr4        -0.02      0.32    -0.58     0.63 1.00       85      118 #> wilr1        -0.36      0.12    -0.59    -0.12 1.01      162      155 #> wilr2         0.04      0.13    -0.22     0.27 1.00      100      154 #> wilr3        -0.11      0.08    -0.26     0.04 1.02       96      114 #> wilr4         0.25      0.09     0.07     0.41 1.01      133      113 #>  #> Family Specific Parameters:  #>       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sigma     2.36      0.03     2.30     2.42 1.01      393      187 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://florale.github.io/multilevelcoda/articles/comp-predictor.html","id":"bayes-factor-for-significance-testing","dir":"Articles","previous_headings":"Multilevel model with compositional predictors","what":"Bayes Factor for significance testing","title":"Multilevel Models with Compositional Predictors","text":"frequentist approach, usually compare fits models using anova(). Bayesian, can done comparing marginal likelihoods two models. Bayes Factors (BFs) indices relative evidence one model another. context compositional multilevel modelling, Bayes Factors provide two main useful functions: Testing single parameters within model Comparing models may utilize Bayes factors answer following question: “model (.e., set ILR predictors) likely produced observed data?” Let’s fit series model brmcoda() predict STRESS sleep-wake composition. precise Bayes factors, use 40,000 posterior draws model. Notes : use Bayes factors, brmsfit models must fitted additional non-default argument save_pars = save_pars(= TRUE). can now compare models bayesfactor_models() function, using intercept-model reference. can see model within-person composition best model - \\(BF\\) = 11.86 compared null (intercept ). Let’s compare models full model. , data favours within-person composition model full model, giving 2.93 times support.","code":"# intercept only model m0 <- brmcoda(compilr = cilr,              formula = STRESS ~ 1 + (1 | ID),              iter = 6000, chains = 8, cores = 8, seed = 123, warmup = 1000,              backend = \"cmdstanr\", save_pars = save_pars(all = TRUE)) #> Warning: CmdStan's precompiled header (PCH) files may need to be rebuilt. #> If your model failed to compile please run rebuild_cmdstan(). #> If the issue persists please open a bug report. #> Error: An error occured during compilation! See the message above for more information.  # between-person composition only model m1 <- brmcoda(compilr = cilr,              formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 + (1 | ID),              iter = 6000, chains = 8, cores = 8, seed = 123, warmup = 1000,              backend = \"cmdstanr\", save_pars = save_pars(all = TRUE)) #> Warning: CmdStan's precompiled header (PCH) files may need to be rebuilt. #> If your model failed to compile please run rebuild_cmdstan(). #> If the issue persists please open a bug report. #> Error: An error occured during compilation! See the message above for more information.  # within-person composition only model m2 <- brmcoda(compilr = cilr,              formula = STRESS ~ wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),              iter = 6000, chains = 8, cores = 8, seed = 123, warmup = 1000,              backend = \"cmdstanr\", save_pars = save_pars(all = TRUE)) #> Warning: CmdStan's precompiled header (PCH) files may need to be rebuilt. #> If your model failed to compile please run rebuild_cmdstan(). #> If the issue persists please open a bug report. #> Error: An error occured during compilation! See the message above for more information.  # full model m <- brmcoda(compilr = cilr,              formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 +                wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),              iter = 6000, chains = 8, cores = 8, seed = 123, warmup = 1000,              backend = \"cmdstanr\", save_pars = save_pars(all = TRUE)) #> Warning: CmdStan's precompiled header (PCH) files may need to be rebuilt. #> If your model failed to compile please run rebuild_cmdstan(). #> If the issue persists please open a bug report. #> Error: An error occured during compilation! See the message above for more information. comparison <- bayesfactor_models(m$Model, m1$Model, m2$Model, denominator = m0$Model) #> Warning: Bayes factors might not be precise. #>   For precise Bayes factors, sampling at least 40,000 posterior samples is recommended. #> Error: Bridgesampling failed. Perhaps you did not set 'save_pars = save_pars(all = TRUE)' when fitting your model? If you are running bridge sampling on another machine than the one used to fit the model, you may need to set recompile = TRUE. comparison #> Bayes Factors for Model Comparison #>  #>     Model       BF #> [1]       2.90e-05 #>  #> * Against Denominator: [2] #> *   Bayes Factor Type: marginal likelihoods (bridgesampling) update(comparison, reference = 1) #> Bayes Factors for Model Comparison #>  #>     Model       BF #> [2]       3.45e+04 #>  #> * Against Denominator: [1] #> *   Bayes Factor Type: marginal likelihoods (bridgesampling)"},{"path":"https://florale.github.io/multilevelcoda/articles/comp-predictor.html","id":"substitution-model","dir":"Articles","previous_headings":"","what":"Substitution model","title":"Multilevel Models with Compositional Predictors","text":"examining relationships compositional data outcome, often also interested changes outcomes fixed duration time reallocated one compositional component another, components remain constant. changes can examined using compositional isotemporal substitution model. multilevelcoda, extend model multilevel approach test -person within-person changes. substitution models can computed using substitution() function, following arguments:","code":""},{"path":"https://florale.github.io/multilevelcoda/articles/comp-predictor.html","id":"between-person-substitution-model","dir":"Articles","previous_headings":"Substitution model","what":"Between-person substitution model","title":"Multilevel Models with Compositional Predictors","text":"example examines changes stress different pairwise substitution sleep-wake behaviours 5 minutes, -person level. output contains multiple data sets results compositional components. results changes stress sleep (TST) substituted 5 minutes, averaged across levels covariates. None results significant, given credible intervals cross 0, showing increasing sleep (TST) expense behaviours associated changes stress. Notice column indicating levels convariates, indicating results averaged.","code":"bsubm <- substitution(object = m, delta = 5,                        level = \"between\", ref = \"grandmean\") knitr::kable(bsubm$BetweenSub$TST)"},{"path":"https://florale.github.io/multilevelcoda/articles/comp-predictor.html","id":"within-person-substitution-model","dir":"Articles","previous_headings":"Substitution model","what":"Within-person substitution model","title":"Multilevel Models with Compositional Predictors","text":"Let’s now take look stress changes different pairwise sleep-wake behaviours substituted 5 minutes, within-person level. Results 5 minute substitution. within-person level, significant results substitution sleep (TST) time awake bed (WAKE) 5 minutes, behaviours. Increasing sleep expense time spent awake bed predicted 0.02 higher stress [95% CI 0.00, 0.03], given day. Conversely, less sleep time awake bed predicted less stress (b = -0.02 [95% CI -0.03, -0.00]).","code":"# Within-person substitution wsubm <- substitution(object = m, delta = 5,                        level = \"within\", ref = \"grandmean\") knitr::kable(wsubm$WithinSub$TST)"},{"path":"https://florale.github.io/multilevelcoda/articles/comp-predictor.html","id":"more-interesting-substitution-models","dir":"Articles","previous_headings":"Substitution model","what":"More interesting substitution models","title":"Multilevel Models with Compositional Predictors","text":"can learn different types substitution models atCompositional Multilevel Substitution Models.","code":""},{"path":"https://florale.github.io/multilevelcoda/articles/introduction.html","id":"compositional-data-analysis","dir":"Articles","previous_headings":"","what":"Compositional Data Analysis","title":"Introduction to Compositional Multilevel Modelling","text":"Compositional data analysis (CoDA) analysis compositional multivariate positive data. Compositional data typically expressed amount, e.g., percentage, proportion, often sum constant, usually 100% one. data common many fields: ecology (e.g., relative abundances species), geography (e.g., proportions land use), biochemistry (e.g., fatty acid proportions), nutritional epidemiology (e.g., intake macronutrients like proteins, fats carbohydrates), time-use epidemiology (e.g., time spent different sleep-wake behaviours 24-hour day).","code":""},{"path":"https://florale.github.io/multilevelcoda/articles/introduction.html","id":"multilevel-modelling-for-compositional-data","dir":"Articles","previous_headings":"","what":"Multilevel Modelling for Compositional Data","title":"Introduction to Compositional Multilevel Modelling","text":"Compositional data can non-independent repeated measures data. example, sleep-wake behaviours often measured across multiple time points (e.g., across several consecutive days). Therefore, often use multilevel models include fixed effects (regression coefficients identical everyone) random effects (regression coefficients vary randomly person). addition, can also decompose data two sources variability: -person (differences individuals) within-person (differences within individuals). multilevelcoda package, implements Compositional Multilevel Model model compositional data amultilevel framework. mulitlevelcoda includes functions compute Isometric log ratio (ILR) within-person levels, fit Baysian multilevel model, conduct post-hoc analyses susbtitution models. See vignettes: Multilevel Model Compositional Predictors Multilevel Model Compositional Outcomes Compositional Multilevel Substitution Models","code":""},{"path":"https://florale.github.io/multilevelcoda/articles/substitution-model.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Compositional Multilevel Substitution Models","text":"often interested outcome changes fixed unit predictor (e.g., minutes behaviours day) reallocated one compositional component another. Compositional Isotemporal Substitution Model can used estimate change. multilevelcoda package implements method multilevel framework offers functions - within-person levels variability. discuss 4 different substitution models vignette. begin loading necessary packages, multilevelcoda, brms (models fitting), doFuture (parallelisation), data sets mcompd (simulated compositional sleep wake variables), sbp (sequential binary partition), psub (base possible substitution).","code":"library(multilevelcoda) library(brms) #> Loading required package: Rcpp #> Loading 'brms' package (version 2.19.0). Useful instructions #> can be found by typing help('brms'). A more detailed introduction #> to the package is available through vignette('brms_overview'). #>  #> Attaching package: 'brms' #> The following object is masked from 'package:stats': #>  #>     ar library(doFuture) #> Loading required package: foreach #> Loading required package: future  data(\"mcompd\")  data(\"sbp\") data(\"psub\")  options(digits = 3) # reduce number of digits shown"},{"path":"https://florale.github.io/multilevelcoda/articles/substitution-model.html","id":"fitting-main-model","dir":"Articles","previous_headings":"","what":"Fitting main model","title":"Compositional Multilevel Substitution Models","text":"Let’s fit main brms model predicting STRESS within-person sleep-wake behaviours (represented isometric log ratio coordinates), sex covariate, using brmcoda() function. can compute ILR coordinate predictors using compilr() function. summary() model results. can see first forth within-person ILR coordinates associated stress. Interpretation multilevel ILR coordinates can often less intuitive. example, significant coefficient wilr1 shows within-person change sleep behaviours (sleep duration time awake bed combined), relative wake behaviours (moderate vigorous physical activity, light physical activity, sedentary behaviour) given day, associated stress. However, several behaviours involved coordinate, don’t know within-person change drives association. change sleep, people sleep average given day, also change time awake. , don’t know specific changes time spent across behaviours. , people sleep , behaviour spend less time ? common issue working multilevel compositional data ILR coordinates often contains information multiple compositional components. gain insights associations help interpretation, can conduct post-hoc analyses using substitution models multilevel package.","code":"cilr <- compilr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  m <- brmcoda(compilr = cilr,              formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 +                                 wilr1 + wilr2 + wilr3 + wilr4 + Female + (1 | ID),              cores = 8, seed = 123, backend = \"cmdstanr\") summary(m$Model) #>  Family: gaussian  #>   Links: mu = identity; sigma = identity  #> Formula: STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 + wilr1 + wilr2 + wilr3 + wilr4 + Female + (1 | ID)  #>    Data: tmp (Number of observations: 3540)  #>   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; #>          total post-warmup draws = 4000 #>  #> Group-Level Effects:  #> ~ID (Number of levels: 266)  #>               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS #> sd(Intercept)     0.99      0.06     0.87     1.11 1.00     1179 #>               Tail_ESS #> sd(Intercept)     2176 #>  #> Population-Level Effects:  #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS #> Intercept     2.64      0.47     1.68     3.57 1.00     1429 #> bilr1         0.12      0.33    -0.54     0.77 1.00      971 #> bilr2         0.53      0.35    -0.16     1.21 1.00     1124 #> bilr3         0.13      0.21    -0.29     0.55 1.00     1052 #> bilr4        -0.01      0.29    -0.57     0.55 1.00     1021 #> wilr1        -0.34      0.12    -0.58    -0.10 1.00     2990 #> wilr2         0.05      0.13    -0.21     0.31 1.00     3396 #> wilr3        -0.10      0.08    -0.25     0.04 1.00     2900 #> wilr4         0.23      0.10     0.04     0.43 1.00     2894 #> Female       -0.39      0.17    -0.74    -0.08 1.00     1405 #>           Tail_ESS #> Intercept     2263 #> bilr1         1409 #> bilr2         1679 #> bilr3         1809 #> bilr4         1941 #> wilr1         3206 #> wilr2         3077 #> wilr3         3218 #> wilr4         3220 #> Female        1697 #>  #> Family Specific Parameters:  #>       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sigma     2.37      0.03     2.31     2.43 1.00     4462     2814 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://florale.github.io/multilevelcoda/articles/substitution-model.html","id":"substitution-models","dir":"Articles","previous_headings":"","what":"Substitution models","title":"Compositional Multilevel Substitution Models","text":"multilevelcoda package provides 2 different methods compute substitution models, via substitution() function. Basic substitution models: -person substitution Within-person substitution Average marginal substitution models: Average marginal -person substitution Average marginal within-person substitution Tips: Substitution models often computationally demanding tasks. can speed models using parallel execution, example, using doFuture package.","code":""},{"path":"https://florale.github.io/multilevelcoda/articles/substitution-model.html","id":"basic-substitution-model","dir":"Articles","previous_headings":"Substitution models","what":"Basic Substitution model","title":"Compositional Multilevel Substitution Models","text":"example examines changes stress different pairwise substitution sleep-wake behaviours period 1 5 minutes, -person level. specify level = indicate substitutional change -person level, ref = \"grandmean\" indicate substitution model using grand compositional mean reference composition. model contains covariates, substitution() average predictions across levels covariates default. Output substitution() contains multiple data set results available compositional component. results changes stress sleep (TST) substituted 10 minutes. None significant, given credible intervals cross 0, showing increasing sleep (TST) expense behaviours associated changes stress -person level. results can plotted see patterns easily using plotsub() function. Example -person Substitution Model results within-person level. within-person level, got significant results substitution sleep (TST) time awake bed (WAKE) 5 minutes, behaviours. Increasing 5 minutes sleep expense time spent awake bed predicted 0.04 higher stress [95% CI 0.01, 0.7], given day. Conversely, less sleep time awake bed predicted less stress (b = -0.03 [95% CI -0.06, -0.01]). Let’s also plot theses results. Example Within-person Substitution Model","code":"subm1 <- substitution(object = m, delta = 1:10,                       ref = \"grandmean\", level = c(\"between\", \"within\")) #> Warning: executing %dopar% sequentially: no parallel backend #> registered knitr::kable(summary(subm1, delta = 10, level = \"between\", to = \"TST\")) plotsub(data = subm1$BetweenSub$TST,          x = \"sleep\", y = \"stress\") knitr::kable(summary(subm1, delta = 10, level = \"within\", to = \"TST\")) plotsub(data = subm1$WithinSub$TST, x = \"sleep\", y = \"stress\")"},{"path":"https://florale.github.io/multilevelcoda/articles/substitution-model.html","id":"average-marginal-substitution-effects","dir":"Articles","previous_headings":"Substitution models","what":"Average Marginal Substitution Effects","title":"Compositional Multilevel Substitution Models","text":"average marginal models use unit compositional mean reference composition obtain average predicted group-level changes outcome every unit (e.g., individual) sample reallocates specific unit one compositional part another. difference basic substitution model yields prediction conditioned “average” person data set (e.g., using grand compositional mean reference composition). Average substitution models models generally computationally expensive basic subsitution models. models can run faster shorter walltime using parallel execution. example, use package doFuture parallel models. substitution() run 5 substitution models 5 sleep-wake behaviours, parallel across 5 workers. results. comparison - within-person substitution model sleep stress, plot using plotsub() ggpubr::ggarrange() functions.","code":"registerDoFuture() plan(multisession, workers = 5)  subm2 <- substitution(object = m, delta = 1:10,                       ref = \"unitmean\", level = c(\"between\", \"within\")) registerDoSEQ() knitr::kable(summary(subm2, delta = 10, to = \"TST\")) #> Error in .checkTypos(e, names_x): Object 'To' not found amongst library(ggpubr) p1 <- plotsub(data = subm2$BetweenSubMargins$TST, x = \"between-person sleep\", y = \"stress\") p2 <- plotsub(data = subm2$WithinSubMargins$TST, x = \"within-person sleep\", y = \"stress\")  ggarrange(p1, p2,            ncol = 1, nrow = 2) #>  #> Attaching package: 'ggpubr' #> The following object is masked from 'package:cowplot': #>  #>     get_legend #> Error in plotsub(data = subm2$BetweenSubMargins$TST, x = \"between-person sleep\", : data must be a data table or data frame,and is an element of a wsub, bsub, wsubmargins, bsubmargins object. #> Error in plotsub(data = subm2$WithinSubMargins$TST, x = \"within-person sleep\", : data must be a data table or data frame,and is an element of a wsub, bsub, wsubmargins, bsubmargins object. #> Error in eval(expr, envir, enclos): object 'p1' not found"},{"path":"https://florale.github.io/multilevelcoda/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Flora Le. Author, maintainer. Joshua F. Wiley. Author.","code":""},{"path":"https://florale.github.io/multilevelcoda/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Le F, Wiley J (2023). multilevelcoda: Estimate Bayesian Multilevel Models Compositional Data. https://florale.github.io/multilevelcoda/, https://github.com/florale/multilevelcoda.","code":"@Manual{,   title = {multilevelcoda: Estimate Bayesian Multilevel Models for Compositional Data},   author = {Flora Le and Joshua F. Wiley},   year = {2023},   note = {https://florale.github.io/multilevelcoda/, https://github.com/florale/multilevelcoda}, }"},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"multilevelcoda","text":"package provides functions model compositional data multilevel framework using full Bayesian inference. integrates principes Compositional Data Analysis (CoDA) Multilevel Modelling supports compositional data outcome predictors wide range generalized (non-)linear multivariate multilevel models.","code":""},{"path":"https://florale.github.io/multilevelcoda/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"multilevelcoda","text":"install latest release version CRAN, run current developmental version can downloaded github via multilevelcoda built brms, based Stan, C++ compiler required. program Rtools (available https://cran.r-project.org/bin/windows/Rtools/) comes C++ compiler Windows. Mac, Xcode required. instructions get compilers running, see prerequisites section https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started.","code":"install.packages(\"multilevelcoda\") if (!requireNamespace(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"florale/multilevelcoda\")"},{"path":"https://florale.github.io/multilevelcoda/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"multilevelcoda","text":"can learn package vignettes: Introduction Compositional Multilevel Modelling Multilevel Models Compositional Outcomes Multilevel Models Compositional Predictors Compositional Multilevel Substitution Models","code":""},{"path":"https://florale.github.io/multilevelcoda/index.html","id":"citing-multilevelcoda-and-related-software","dir":"","previous_headings":"","what":"Citing multilevelcoda and related software","title":"multilevelcoda","text":"TBA","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/basesub.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Pairwise Substitution — basesub","title":"Base Pairwise Substitution — basesub","text":"Makes data set possible pairwise substitution composition can used base substitution models.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/basesub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Pairwise Substitution — basesub","text":"","code":"basesub(parts)"},{"path":"https://florale.github.io/multilevelcoda/reference/basesub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Pairwise Substitution — basesub","text":"parts character vector specifying names compositional variables used.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/basesub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base Pairwise Substitution — basesub","text":"data table possible pairwise substitution.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/basesub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base Pairwise Substitution — basesub","text":"","code":"data(mcompd)  ps <- basesub(parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\")) ps2 <- basesub(c(\"WAKE\", \"MVPA\", \"LPA\", \"SB\"))  print(ps2) #>     WAKE MVPA LPA SB #>  1:    1   -1   0  0 #>  2:    1    0  -1  0 #>  3:    1    0   0 -1 #>  4:   -1    1   0  0 #>  5:    0    1  -1  0 #>  6:    0    1   0 -1 #>  7:   -1    0   1  0 #>  8:    0   -1   1  0 #>  9:    0    0   1 -1 #> 10:   -1    0   0  1 #> 11:    0   -1   0  1 #> 12:    0    0  -1  1  ## cleanup rm(mcompd, ps1, ps2) #> Warning: object 'mcompd' not found #> Warning: object 'ps1' not found"},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Bayesian generalised (non-)linear multilevel compositional model\nvia full Bayesian inference using brms, — brmcoda","title":"Fit Bayesian generalised (non-)linear multilevel compositional model\nvia full Bayesian inference using brms, — brmcoda","text":"function fits brm model multilevel ILR coordinates.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Bayesian generalised (non-)linear multilevel compositional model\nvia full Bayesian inference using brms, — brmcoda","text":"","code":"brmcoda(compilr, formula, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Bayesian generalised (non-)linear multilevel compositional model\nvia full Bayesian inference using brms, — brmcoda","text":"compilr compilr object containing data composition, ILR coordinates, variables used model. formula object class formula, brmsformula: symbolic description model fitted. Details model specification can found brmsformula. ... arguments passed brm.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Bayesian generalised (non-)linear multilevel compositional model\nvia full Bayesian inference using brms, — brmcoda","text":"brmcoda two elements CompILR object class compilr used brm model. Model object class brmsfit, contains posterior draws along many useful information model.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Bayesian generalised (non-)linear multilevel compositional model\nvia full Bayesian inference using brms, — brmcoda","text":"","code":"if (FALSE) { data(mcompd) data(sbp) cilr <- compilr(data = mcompd, sbp = sbp,          parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  # inspects ILRs before passing to brmcoda names(cilr$BetweenILR) names(cilr$WithinILR) names(cilr$TotalILR)  # model with compositional predictor at between and within-person levels m1 <- brmcoda(compilr = cilr,                formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 +                                  wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),                chain = 1, iter = 500,               backend = \"cmdstanr\")               # model with compositional outcome   m2 <- brmcoda(compilr = cilr,  formula = mvbind(ilr1, ilr2, ilr3, ilr4) ~ STRESS + Female + (1 | ID),  chain = 1, iter = 500,              backend = \"cmdstanr\")               }"},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":null,"dir":"Reference","previous_headings":"","what":"Between-person Simple Substitution. — bsub","title":"Between-person Simple Substitution. — bsub","text":"Estimate difference outcomes compositional parts substituted specific unit(s) level. bsub output encapsulates substitution results compositional parts present brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Between-person Simple Substitution. — bsub","text":"","code":"bsub(   object,   delta,   basesub,   summary = TRUE,   ref = \"grandmean\",   level = \"between\",   weight = NULL,   ... )"},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Between-person Simple Substitution. — bsub","text":"object fitted brmcoda object. Required. delta integer, numeric value vector indicating amount substituted change compositional parts. basesub data.frame data.table base possible substitution compositional parts. data set can computed using function basesub. NULL, possible pairwise substitution compositional parts used. summary logical value. estimate level reference grid (FALSE) average (TRUE) returned? Default TRUE. applicable model covariates addition isometric log-ratio coordinates (.e., adjusted model). ref Either character value vector dataset. ref can grandmean data.frame data.table user's specified reference grid consisting combinations covariates predictions made. User's specified reference grid applicable substitution model using single reference composition value (e.g., clustermean user's specified). Default grandmean. level character string vector. estimate /within level? Default . weight character value specifying weight use calculation reference composition. weight can equal gives equal weight across units (e.g., individuals) proportional weights proportion frequencies units averaged (e.g., observations across individuals) Default equal. ... Additional arguments passed describe_posterior.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Between-person Simple Substitution. — bsub","text":"list containing result multilevel compositional substitution model. element list estimation compositional part include least eight elements. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. Either Reference Either grandmean, clustermean, users","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Between-person Simple Substitution. — bsub","text":"","code":"# \\donttest{ data(mcompd) data(sbp) data(psub)  cilr <- compilr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  # model with compositional predictor at between and between-person levels m <- brmcoda(compilr = cilr,               formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 +                                  wilr1 + wilr2 + wilr3 + wilr4 + Female + (1 | ID),               chain = 1, iter = 500,              backend = \"cmdstanr\") #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path. subm <- bsub(object = m, basesub = psub, delta = 5) #> Error in eval(expr, envir, enclos): object 'm' not found # }"},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":null,"dir":"Reference","previous_headings":"","what":"Between-person Average Substitution. — bsubmargins","title":"Between-person Average Substitution. — bsubmargins","text":"Using fitted model object, estimates average marginal difference compositional parts substituted specific unit(s) -person level. bsubmargins output encapsulates substitution results compositional parts present brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Between-person Average Substitution. — bsubmargins","text":"","code":"bsubmargins(   object,   delta,   basesub,   ref = \"clustermean\",   level = \"between\",   weight = NULL,   ... )"},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Between-person Average Substitution. — bsubmargins","text":"object fitted brmcoda object. Required. delta integer, numeric value vector indicating amount substituted change compositional parts. basesub data.frame data.table base possible substitution compositional parts. data set can computed using function basesub. NULL, possible pairwise substitution compositional parts used. ref character string. Default clustermean. level character string. Default . weight character value specifying weight use calculation reference composition. weight can equal gives equal weight units (e.g., individuals) proportional weights proportion frequencies units averaged (e.g., observations across individuals) Default equal. ... Additional arguments passed describe_posterior.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Between-person Average Substitution. — bsubmargins","text":"list containing result multilevel compositional substitution model. element list estimation compositional part include least eight elements. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. Either Reference Either grandmean, clustermean, users","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Between-person Average Substitution. — bsubmargins","text":"","code":"if (FALSE) { data(psub) data(mcompd) data(psub) cilr <- compilr(data = mcompd[ID %in% 1:10, .SD[1:3], by = ID], sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  m <- brmcoda(compilr = cilr,               formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 + wilr1 +                                  wilr2 + wilr3 + wilr4 + Female + (1 | ID),               chains = 1, iter = 500,              backend = \"cmdstanr\")               subm <- bsubmargins(object = m, basesub = psub, delta = 5) }"},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute useful indices from a (dataset of) multilevel composition(s) — compilr","title":"Compute useful indices from a (dataset of) multilevel composition(s) — compilr","text":"Computes sets compositions IRLs Multilevel Compositional Data models.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute useful indices from a (dataset of) multilevel composition(s) — compilr","text":"","code":"compilr(data, sbp, parts, total = 1440, idvar = \"ID\")"},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute useful indices from a (dataset of) multilevel composition(s) — compilr","text":"data data.frame data.table containing data variables used analysis. must include composition ID variable. Required. sbp signary matrix indicating sequential binary partition. Required. parts character vector specifying names compositional variables used. total numeric value total amount compositions closed. Default 1440. idvar character string specifying name variable containing IDs. Default ID.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute useful indices from a (dataset of) multilevel composition(s) — compilr","text":"compilr object twelve elements. BetweenComp vector class acomp representing one closed -person composition matrix class acomp representing multiple closed -person compositions one row. WithinComp vector class acomp representing one closed within-person composition matrix class acomp representing multiple closed within-person compositions one row. TotalComp vector class acomp representing one closed total composition matrix class acomp representing multiple closed total compositions one row. BetweenILR Isometric log ratio transform -person composition. WithinILR Isometric log ratio transform within-person composition. TotalILR Isometric log ratio transform total composition. data user's dataset imputed dataset input data contains zeros. psi ILR matrix associated user-defined partition structure. sbp user-defined sequential binary partition matrix. parts Names compositional variables. idvar Name variable containing IDs. total Total amount compositions closed.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute useful indices from a (dataset of) multilevel composition(s) — compilr","text":"","code":"data(mcompd) data(sbp) cilr <- compilr(data = mcompd, sbp = sbp,                   parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\") str(cilr) #> List of 12 #>  $ BetweenComp: 'acomp' num [1:3540, 1:5] 494.2 494.2 494.2 494.2 494.2 72.2 72.2 72.2 72.2 72.2 249.3 249.3 249.3 249.3 249.3 503.8 503.8 503.8 503.8 503.| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"BTST\" \"BWAKE\" \"BMVPA\" \"BLPA\" ... #>  $ WithinComp : num [1:3540, 1:5] 321 283 178 281 371 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"WTST\" \"WWAKE\" \"WMVPA\" \"WLPA\" ... #>  $ TotalComp  : 'acomp' num [1:3540, 1:5] 542.3 458.1 270.6 525.4 650.8 99 49.4 41.1 75.6 86.1 297.4 117.3 488.7 258.7 111.8 459.9 652.9 625 397.9 436.5 41| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ BetweenILR : 'rmult' num [1:3540, 1:4] -0.29534 -0.29534 -0.29534 -0.29534 -0.29534 1.36014 1.36014 1.36014 1.36014 1.36014 0.00961 0.00961 0.00961 0.00| __truncated__ ... #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.3432 0.3432 0.3432 0.3432 0.3432 0.0501 0.0501 0.0501 0.0501 0.0501 0.1731 0.1731 0.1731 0.1731 0.1731 0.3499 0| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>   ..- attr(*, \"V\")= num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"bilr1\" \"bilr2\" \"bilr3\" \"bilr4\" #>  $ WithinILR  : 'rmult' num [1:3540, 1:4] 0.5822 -0.177 -0.1904 -0.0204 0.5006 -0.1573 0.2142 -0.028 0.0112 0.0705 0.6174 -0.8432 1.3248 -0.0428 -0.6989 0.| __truncated__ ... #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.2231 0.1962 0.1234 0.195 0.2578 0.2787 0.1449 0.1284 0.192 0.2333 0.2426 0.0996 0.4416 0.1903 0.0878 0.1856 0.2| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>   ..- attr(*, \"V\")= num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"wilr1\" \"wilr2\" \"wilr3\" \"wilr4\" #>  $ TotalILR   : 'rmult' num [1:3540, 1:4] 0.2869 -0.4724 -0.4858 -0.3157 0.2053 1.2029 1.5743 1.3321 1.3713 1.4307 0.627 -0.8336 1.3344 -0.0332 -0.6893 1.7| __truncated__ ... #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.3766 0.3181 0.1879 0.3649 0.452 0.0687 0.0343 0.0286 0.0525 0.0598 0.2066 0.0814 0.3394 0.1796 0.0776 0.3194 0.| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>   ..- attr(*, \"V\")= num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"ilr1\" \"ilr2\" \"ilr3\" \"ilr4\" #>  $ data       :Classes ‘data.table’ and 'data.frame':\t3540 obs. of  9 variables: #>   ..$ TST   : num [1:3540] 542 458 271 525 651 ... #>   ..$ WAKE  : num [1:3540] 99 49.4 41.1 75.6 86.1 ... #>   ..$ MVPA  : num [1:3540] 297 117 489 259 112 ... #>   ..$ LPA   : num [1:3540] 460 653 625 398 436 ... #>   ..$ SB    : num [1:3540] 41.4 162.3 14.5 182.5 154.8 ... #>   ..$ ID    : int [1:3540] 185 185 185 185 185 185 185 185 185 185 ... #>   ..$ Age   : num [1:3540] 29.7 29.7 29.7 29.7 29.7 ... #>   ..$ Female: num [1:3540] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ STRESS: num [1:3540] 3.67 7.21 2.84 1.51 7.75 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ psi        : num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>   .. ..$ : NULL #>  $ sbp        : num [1:4, 1:5] 1 1 0 0 1 -1 0 0 -1 0 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ parts      : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ idvar      : chr \"ID\" #>  $ total      : num 1440 #>  - attr(*, \"class\")= chr \"compilr\"  ## cleanup rm(cilr, mcompd, sbp) #> Warning: object 'mcompd' not found #> Warning: object 'sbp' not found"},{"path":"https://florale.github.io/multilevelcoda/reference/mcompd.html","id":null,"dir":"Reference","previous_headings":"","what":"Multilevel Compositional Data — mcompd","title":"Multilevel Compositional Data — mcompd","text":"simulated dataset containing multiple days compositional data.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/mcompd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multilevel Compositional Data — mcompd","text":"","code":"mcompd"},{"path":"https://florale.github.io/multilevelcoda/reference/mcompd.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Multilevel Compositional Data — mcompd","text":"data table containing 9 variables. TST Total Sleep Time (minutes) --- repeated measure WAKE Wake time bed, trying sleep (minutes) --- repeated measure MVPA Moderate Vigorous Physical Activity (minutes) --- repeated measure LPA Light Physical Activity (minutes) --- repeated measure SB Sedentary Behavior (minutes) --- repeated measure ID unique identifier individual Age Age years --- baseline measure Female Binary: whether participants identified female (1) (0) --- baseline measure STRESS Self report stress measures 0 10 scale --- repeated measure","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/plotsub.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitution plot — plotsub","title":"Substitution plot — plotsub","text":"function useful visualising estimated differences outcomes compositional variables substituted specific period time.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/plotsub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitution plot — plotsub","text":"","code":"plotsub(data, x, y, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/plotsub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitution plot — plotsub","text":"data dataset use plot. must component list resulted one following functions: wsub, bsub, wsubmargins, bsubmargins. x character string specifying name compostional predictor variable. y character string specifying name outcome variable. ... arguments passed ggplot.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/plotsub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitution plot — plotsub","text":"ggplot graph object showing estimated difference outcome pair compositional variables substituted specific time.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/psub.html","id":null,"dir":"Reference","previous_headings":"","what":"Possible Pairwise Substitutions — psub","title":"Possible Pairwise Substitutions — psub","text":"dataset containing possible pairwise subsitutions.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/psub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Possible Pairwise Substitutions — psub","text":"","code":"psub"},{"path":"https://florale.github.io/multilevelcoda/reference/psub.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Possible Pairwise Substitutions — psub","text":"data table containing 5 variables. V1 first compositional variable V2 second compositional variable V3 third compositional variable V4 fourth compositional variable V5 fifth compositional variable","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/sbp.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential Binary Partition — sbp","title":"Sequential Binary Partition — sbp","text":"matrix sequential binary partition.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/sbp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential Binary Partition — sbp","text":"","code":"sbp"},{"path":"https://florale.github.io/multilevelcoda/reference/sbp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sequential Binary Partition — sbp","text":"matrix 5 columns 4 rows. V1 first compositional variable V2 second compositional variable V3 third compositional variable V4 fourth compositional variable V5 fifth compositional variable","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/submargins.html","id":null,"dir":"Reference","previous_headings":"","what":"Average Marginal Substitution. — submargins","title":"Average Marginal Substitution. — submargins","text":"Using fitted model object, estimates average marginal difference compositional parts substituted specific unit(s). submargins output encapsulates substitution results compositional parts present brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/submargins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average Marginal Substitution. — submargins","text":"","code":"submargins(object, delta, basesub, level = \"total\", type = \"marginal\", ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/submargins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average Marginal Substitution. — submargins","text":"object fitted brmcoda object. Required. delta integer, numeric value vector indicating amount substituted change compositional parts. basesub data.frame data.table base possible substitution compositional parts. data set can computed using function basesub. NULL, possible pairwise substitution compositional parts used. level character string vector. estimate -person /within-person level? Required. type character string vector. estimate conditional mean average marginal mean? Required. ... Additional arguments passed describe_posterior.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/submargins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average Marginal Substitution. — submargins","text":"list containing result multilevel compositional substitution model. element list estimation compositional part include least six elements. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. EffectType Either estimated conditional average marginal changes.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/submargins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Average Marginal Substitution. — submargins","text":"","code":"if (FALSE) { data(mcompd) data(sbp) data(psub) cilr <- compilr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  # model with compositional predictor m <- brmcoda(compilr = cilr,               formula = STRESS ~ ilr1 + ilr2 + ilr3 + ilr4 + (1 | ID),               chain = 1, iter = 500,              backend = \"cmdstanr\")               subm <- submargins(object = m, basesub = psub, delta = 5) }"},{"path":"https://florale.github.io/multilevelcoda/reference/substitution.html","id":null,"dir":"Reference","previous_headings":"","what":"Multilevel Compositional Substitution Model. — substitution","title":"Multilevel Compositional Substitution Model. — substitution","text":"Estimate difference outcome compositional parts substituted specific unit(s). substitution output encapsulates substitution results compositional parts present brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/substitution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multilevel Compositional Substitution Model. — substitution","text":"","code":"substitution(   object,   delta,   basesub = NULL,   summary = TRUE,   ref = c(\"grandmean\", \"clustermean\"),   level = c(\"between\", \"within\"),   weight = NULL,   ... )"},{"path":"https://florale.github.io/multilevelcoda/reference/substitution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multilevel Compositional Substitution Model. — substitution","text":"object fitted brmcoda object. Required. delta integer, numeric value vector indicating amount substituted change compositional parts. basesub data.frame data.table base possible substitution compositional parts. data set can computed using function basesub. NULL, possible pairwise substitution compositional parts used. summary logical value. estimate level reference grid (FALSE) average (TRUE) returned? Default TRUE. applicable model covariates addition isometric log-ratio coordinates (.e., adjusted model). ref Either character value vector dataset. ref can grandmean /clustermean, data.frame data.table user's specified reference grid consisting combinations covariates predictions made. User's specified reference grid applicable substitution model using single reference composition value (e.g., clustermean user's specified). Required. level character string vector. estimate /within level? Required. weight character value specifying weight use calculation reference composition. weight can equal gives equal weight units (e.g., individuals) proportional weights proportion frequencies units averaged (e.g., observations across individuals) Default equal. ... Additional arguments passed describe_posterior.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/substitution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multilevel Compositional Substitution Model. — substitution","text":"list containing results multilevel compositional substitution model. element list substitution estimation compositional part include least eight elements. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. Either Reference Either grandmean, clustermean, users","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/substitution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multilevel Compositional Substitution Model. — substitution","text":"","code":"if (FALSE) { data(mcompd) data(sbp) data(psub) cilr <- compilr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  # model with compositional predictor at between and between-person levels m <- brmcoda(compilr = cilr,               formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 +                                  wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),               chain = 1, iter = 500, backend = \"cmdstanr\")               subm <- substitution(object = m, delta = 5,                      ref = c(\"grandmean\", \"clustermean\"),                       level = c(\"between\", \"within\")) }"},{"path":"https://florale.github.io/multilevelcoda/reference/summary.substitution.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary substitution — summary.substitution","title":"Summary substitution — summary.substitution","text":"method allows summarising existing substitution object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/summary.substitution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary substitution — summary.substitution","text":"","code":"# S3 method for substitution summary(object, delta, to, from, ref, level, digits = 2, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/summary.substitution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary substitution — summary.substitution","text":"object substitution object containing output substitution models. delta integer, numeric value vector indicating desired delta substitution results summarised. Default delta available substitution object. character value vector specifying names compositional parts reallocated model. character value vector specifying names compositional parts reallocated model. ref Either character value vector ((grandmean /clustermean users), Default ref available substitution object . level character string vector (/within). Default level available substitution object . digits integer value used number formatting. Default 3. ... generic argument, use.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/summary.substitution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary substitution — summary.substitution","text":"summary substitution object twelve elements. BetweenComp vector class acomp representing one closed -person composition matrix class acomp representing multiple closed -person compositions one row. WithinComp vector class acomp representing one closed within-person composition matrix class acomp representing multiple closed within-person compositions one row. TotalComp vector class acomp representing one closed total composition matrix class acomp representing multiple closed total compositions one row. BetweenILR Isometric log ratio transform -person composition. WithinILR Isometric log ratio transform within-person composition. TotalILR Isometric log ratio transform total composition. data user's dataset imputed dataset input data contains zeros. psi ILR matrix associated user-defined partition structure. sbp user-defined sequential binary partition matrix. parts Names compositional variables. idvar Name variable containing IDs. total Total amount compositions closed.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/update.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Update brmcoda models — update.brmcoda","title":"Update brmcoda models — update.brmcoda","text":"method allows updating existing brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/update.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update brmcoda models — update.brmcoda","text":"","code":"# S3 method for brmcoda update(object, formula. = NULL, newdata = NULL, newcilr = NULL, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/update.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update brmcoda models — update.brmcoda","text":"object fitted brmcoda object updated. Required. formula. Changes formula; details see update.formula brmsformula. newdata data.frame data.table containing data variables used analysis. must include composition ID variable existing compilr object. newcilr compilr object containing data composition, ILR coordinates, variables used updated model. ... arguments passed brm.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/update.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update brmcoda models — update.brmcoda","text":"brmcoda two elements CompIlr object class compilr used brm model. Model object class brmsfit, contains posterior draws along many useful information model.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/update.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update brmcoda models — update.brmcoda","text":"","code":"if (FALSE) { data(mcompd) data(sbp) cilr <- compilr(data = mcompd, sbp = sbp,          parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  # model with compositional predictor at between and within-person levels fit <- brmcoda(compilr = cilr,                formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 +                                  wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),                chain = 1, iter = 500,               backend = \"cmdstanr\")  # removing the effect of wilr1 fit1 <- update(fit, formula. = ~ . - wilr1)  # using only a subset fit2 <- update(fit, newdata = mcompd[ID != 1]) }"},{"path":"https://florale.github.io/multilevelcoda/reference/update.compilr.html","id":null,"dir":"Reference","previous_headings":"","what":"Update compilr — update.compilr","title":"Update compilr — update.compilr","text":"method allows updating existing compilr object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/update.compilr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update compilr — update.compilr","text":"","code":"# S3 method for compilr update(object, newdata, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/update.compilr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update compilr — update.compilr","text":"object compilr object containing data composition, ILR coordinates, variables updated. newdata data.frame data.table containing data variables used analysis. must include composition ID variable existing compilr object. ... generic argument, use.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/update.compilr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update compilr — update.compilr","text":"updated compilr object twelve elements. BetweenComp vector class acomp representing one closed -person composition matrix class acomp representing multiple closed -person compositions one row. WithinComp vector class acomp representing one closed within-person composition matrix class acomp representing multiple closed within-person compositions one row. TotalComp vector class acomp representing one closed total composition matrix class acomp representing multiple closed total compositions one row. BetweenILR Isometric log ratio transform -person composition. WithinILR Isometric log ratio transform within-person composition. TotalILR Isometric log ratio transform total composition. data user's dataset imputed dataset input data contains zeros. psi ILR matrix associated user-defined partition structure. sbp user-defined sequential binary partition matrix. parts Names compositional variables. idvar Name variable containing IDs. total Total amount compositions closed.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/update.compilr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update compilr — update.compilr","text":"","code":"data(mcompd) data(sbp) cilr <- compilr(data = mcompd, sbp = sbp,                   parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  newdat <- mcompd[ID != 1] # excluding ID 1 cilr_new <- update(object = cilr, newdata = newdat)  ## cleanup rm(cilr, mcompd, sbp, cilr_new, newdat) #> Warning: object 'mcompd' not found #> Warning: object 'sbp' not found"},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":null,"dir":"Reference","previous_headings":"","what":"Within-person Simple Substitution. — wsub","title":"Within-person Simple Substitution. — wsub","text":"Using fitted model object, estimate difference outcomes compositional parts substituted specific unit(s) within level. wsub output encapsulates substitution results compositional parts present brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Within-person Simple Substitution. — wsub","text":"","code":"wsub(   object,   basesub,   delta,   summary = TRUE,   ref = \"grandmean\",   level = \"within\",   weight = NULL,   ... )"},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Within-person Simple Substitution. — wsub","text":"object fitted brmcoda object. Required. basesub data.frame data.table base possible substitution compositional parts. data set can computed using function basesub. NULL, possible pairwise substitution compositional parts used. delta integer, numeric value vector indicating amount substituted change compositional parts. summary logical value. estimate level reference grid (FALSE) average (TRUE) returned? Default TRUE. applicable model covariates addition isometric log-ratio coordinates (.e., adjusted model). ref Either character value vector dataset. ref can grandmean data.frame data.table user's specified reference grid consisting combinations covariates predictions made. User's specified reference grid applicable substitution model using single reference composition value (e.g., clustermean user's specified). Default grandmean. level character string vector. estimate /within level? Default within. weight character value specifying weight use calculation reference composition. weight can equal gives equal weight across units (e.g., individuals) proportional weights proportion frequencies units averaged (e.g., observations across individuals) Default equal. ... Additional arguments passed describe_posterior.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Within-person Simple Substitution. — wsub","text":"list containing result multilevel compositional substitution model. element list estimation compositional part include least eight elements. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. Either Reference Either grandmean, clustermean, users","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Within-person Simple Substitution. — wsub","text":"","code":"if (FALSE) { data(mcompd) data(sbp) data(psub) cilr <- compilr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  # model with compositional predictor at between and within-person levels m <- brmcoda(compilr = cilr,               formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 +                                  wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),               chain = 1, iter = 500,              backend = \"cmdstanr\")               subm <- wsub(object = m, basesub = psub, delta = 5) }"},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":null,"dir":"Reference","previous_headings":"","what":"Within-person Average Substitution. — wsubmargins","title":"Within-person Average Substitution. — wsubmargins","text":"Using fitted model object, estimates average marginal difference compositional parts substituted specific unit(s) within level. wsubmargins output encapsulates substitution results compositional parts present brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Within-person Average Substitution. — wsubmargins","text":"","code":"wsubmargins(   object,   delta,   basesub,   ref = \"clustermean\",   level = \"within\",   weight = NULL,   ... )"},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Within-person Average Substitution. — wsubmargins","text":"object fitted brmcoda object. Required. delta integer, numeric value vector indicating amount substituted change compositional parts. basesub data.frame data.table base possible substitution compositional parts. data set can computed using function basesub. NULL, possible pairwise substitution compositional parts used. ref character string. Default clustermean. level character string. Default within. weight character value specifying weight use calculation reference composition. weight can equal gives equal weight units (e.g., individuals) proportional weights proportion frequencies units averaged (e.g., observations across individuals) Default equal. ... Additional arguments passed describe_posterior.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Within-person Average Substitution. — wsubmargins","text":"list containing result multilevel compositional substitution model. element list estimation compositional part include least eight elements. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. Either Reference Either grandmean, clustermean, users","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Within-person Average Substitution. — wsubmargins","text":"","code":"if (FALSE) { data(mcompd) data(sbp) data(psub) cilr <- compilr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  # model with compositional predictor at between and within-person levels m <- brmcoda(compilr = cilr,               formula = STRESS ~ bilr1 + bilr2 + bilr3 + bilr4 +                                  wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),               chain = 1, iter = 500,              backend = \"cmdstanr\")                       subm <- wsubmargins(object = m, basesub = psub, delta = 5) }"},{"path":"https://florale.github.io/multilevelcoda/news/index.html","id":"multilevelcoda-009000","dir":"Changelog","previous_headings":"","what":"multilevelcoda 0.0.9000","title":"multilevelcoda 0.0.9000","text":"Initial release","code":""},{"path":"https://florale.github.io/multilevelcoda/news/index.html","id":"multilevelcoda-100","dir":"Changelog","previous_headings":"","what":"multilevelcoda 1.0.0","title":"multilevelcoda 1.0.0","text":"CRAN release: 2023-01-13 CRAN release","code":""}]
