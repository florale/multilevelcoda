[{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://florale.github.io/multilevelcoda/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://florale.github.io/multilevelcoda/articles/A-introduction.html","id":"compositional-data-analysis","dir":"Articles","previous_headings":"","what":"Compositional Data Analysis","title":"Introduction to Bayesian Compositional Multilevel Modelling","text":"Compositional data analysis (CoDA) analysis compositional multivariate positive data. Compositional data typically expressed amount, e.g., percentage, proportion, often sum constant, usually 100% one. data common many fields: ecology (e.g., relative abundances species), geography (e.g., proportions land use), biochemistry (e.g., fatty acid proportions), nutritional epidemiology (e.g., intake macronutrients like proteins, fats carbohydrates), time-use epidemiology (e.g., time spent different sleep-wake behaviours 24-hour day).","code":""},{"path":"https://florale.github.io/multilevelcoda/articles/A-introduction.html","id":"multilevel-modelling-for-compositional-data","dir":"Articles","previous_headings":"","what":"Multilevel Modelling for Compositional Data","title":"Introduction to Bayesian Compositional Multilevel Modelling","text":"Compositional data can non-independent repeated measures data. example, sleep-wake behaviours often measured across multiple time points (e.g., across several consecutive days). Therefore, often use multilevel models include fixed effects (regression coefficients identical everyone) random effects (regression coefficients vary randomly person). addition, can also decompose data two sources variability: -person (differences individuals) within-person (differences within individuals). multilevelcoda package, implements Compositional Multilevel Model model compositional data amultilevel framework. mulitlevelcoda includes functions compute Isometric log ratio (ILR) within-person levels, fit Baysian multilevel model, conduct post-hoc analyses susbtitution models. See vignettes: Multilevel Model Compositional Predictors Multilevel Model Compositional Outcomes Compositional Multilevel Substitution Analyses","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/articles/B-composition-MLM.html","id":"compositions-and-isometric-log-ratio-ilr-coordinates-","dir":"Articles","previous_headings":"Multilevel model with compositional predictors","what":"Compositions and isometric log ratio (ILR) coordinates.","title":"Multilevel Models with Compositional Predictors","text":"Compositional data often expressed set isometric log ratio (ILR) coordinates regression models. can use complr() function calculate - within-level ILR coordinates use subsequent models predictors. Notes: complr() also calculates total ILR coordinates used outcomes (predictors) models, decomposition - within-level ILR coordinates desired. complr() function multilevel data requires four arguments:","code":"cilr <- complr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\", total = 1440)"},{"path":"https://florale.github.io/multilevelcoda/articles/B-composition-MLM.html","id":"fitting-model","dir":"Articles","previous_headings":"Multilevel model with compositional predictors","what":"Fitting model","title":"Multilevel Models with Compositional Predictors","text":"now use output complr() fit brms model, using brmcoda(). model predicting Stress - within-person sleep-wake behaviours (expressed ILR coordinates). Notes: make sure pass correct names ILR coordinates brms model. summary() model results. Results show first forth within-person ILR coordinate associated stress. interpretation outputs depends construct sequential binary partition. built-sequential binary partition sbp (shown previously), resulting interpretation follows: Due nature within-person ILR coordinates, often challenging interpret results great details. example, significant coefficient wilr1 shows within-person change sleep behaviours (sleep duration time awake bed combined), relative wake behaviours (moderate vigorous physical activity, light physical activity, sedentary behaviour) given day, associated stress. However, several behaviours involved coordinate, don’t know within-person change drives association. change sleep, people sleep average given day, also change time awake. , don’t know specific changes time spent across behaviours. , people slept , behaviour spend less time ? One approach gain insights relationships, changes outcomes associated changes specific time across compositionl components substitution model. discuss substitution model later vignette.","code":"m <- brmcoda(complr = cilr,              formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),              cores = 8, seed = 123, backend = \"cmdstanr\") summary(m) #>  Family: gaussian  #>   Links: mu = identity; sigma = identity  #> Formula: Stress ~ bilr1 + bilr2 + bilr3 + bilr4 + wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID)  #>    Data: tmp (Number of observations: 3540)  #>   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; #>          total post-warmup draws = 4000 #>  #> Multilevel Hyperparameters: #> ~ID (Number of levels: 266)  #>               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(Intercept)     1.00      0.06     0.88     1.12 1.00     1169     2516 #>  #> Regression Coefficients: #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept     2.61      0.49     1.66     3.60 1.00     1101     1761 #> bilr1         0.19      0.32    -0.46     0.82 1.00      943     1863 #> bilr2         0.39      0.35    -0.29     1.06 1.00     1061     1922 #> bilr3         0.14      0.22    -0.28     0.56 1.01      895     1673 #> bilr4        -0.04      0.28    -0.59     0.51 1.00      976     1923 #> wilr1        -0.33      0.12    -0.56    -0.09 1.00     3226     3037 #> wilr2         0.06      0.13    -0.20     0.33 1.00     3469     2836 #> wilr3        -0.09      0.08    -0.25     0.06 1.00     3088     2932 #> wilr4         0.23      0.10     0.04     0.42 1.00     3225     2965 #>  #> Further Distributional Parameters: #>       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sigma     2.38      0.03     2.33     2.44 1.00     5896     2788 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://florale.github.io/multilevelcoda/articles/B-composition-MLM.html","id":"bayes-factor-for-significance-testing","dir":"Articles","previous_headings":"Multilevel model with compositional predictors","what":"Bayes Factor for significance testing","title":"Multilevel Models with Compositional Predictors","text":"frequentist approach, usually compare fits models using anova(). Bayesian, can done comparing marginal likelihoods two models. Bayes Factors (BFs) indices relative evidence one model another. context compositional multilevel modelling, Bayes Factors provide two main useful functions: Testing single parameters within model Comparing models may utilize Bayes factors answer following question: “model (.e., set ILR predictors) likely produced observed data?” Let’s fit series model brmcoda() predict Stress sleep-wake composition. precise Bayes factors, use 40,000 posterior draws model. Notes : use Bayes factors, brmsfit models must fitted additional non-default argument save_pars = save_pars(= TRUE). can now compare models bayesfactor_models() function, using intercept-model reference. can see model within-person composition best model - \\(BF\\) = 11.00 compared null (intercept ). Let’s compare models full model. , data favours within-person composition model full model, giving 2.79 times support.","code":"# intercept only model m0 <- brmcoda(complr = cilr,              formula = Stress ~ 1 + (1 | ID),              iter = 6000, chains = 8, cores = 8, seed = 123, warmup = 1000,              backend = \"cmdstanr\", save_pars = save_pars(all = TRUE))  # between-person composition only model m1 <- brmcoda(complr = cilr,              formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 + (1 | ID),              iter = 6000, chains = 8, cores = 8, seed = 123, warmup = 1000,              backend = \"cmdstanr\", save_pars = save_pars(all = TRUE))  # within-person composition only model m2 <- brmcoda(complr = cilr,              formula = Stress ~ wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),              iter = 6000, chains = 8, cores = 8, seed = 123, warmup = 1000,              backend = \"cmdstanr\", save_pars = save_pars(all = TRUE))  # full model m <- brmcoda(complr = cilr,              formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),              iter = 6000, chains = 8, cores = 8, seed = 123, warmup = 1000,              backend = \"cmdstanr\", save_pars = save_pars(all = TRUE)) comparison <- bayesfactor_models(m$model, m1$model, m2$model, denominator = m0$model) #> Error in `[.data.frame`(x, i, j, drop): undefined columns selected comparison #> Bayes Factors for Model Comparison #>  #>     Model                                                                       BF #> [1] bilr1 + bilr2 + bilr3 + bilr4 + wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID)  3.45 #> [2] bilr1 + bilr2 + bilr3 + bilr4 + (1 | ID)                                 0.294 #> [3] wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID)                                 11.63 #>  #> * Against Denominator: [4] 1 + (1 | ID) #> *   Bayes Factor Type: marginal likelihoods (bridgesampling) update(comparison, reference = 1) #> Bayes Factors for Model Comparison #>  #>     Model                                       BF #> [2] bilr1 + bilr2 + bilr3 + bilr4 + (1 | ID) 0.085 #> [3] wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID)  3.37 #> [4] 1 + (1 | ID)                             0.290 #>  #> * Against Denominator: [1] bilr1 + bilr2 + bilr3 + bilr4 + wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID) #> *   Bayes Factor Type: marginal likelihoods (bridgesampling)"},{"path":"https://florale.github.io/multilevelcoda/articles/B-composition-MLM.html","id":"substitution-model","dir":"Articles","previous_headings":"","what":"Substitution model","title":"Multilevel Models with Compositional Predictors","text":"examining relationships compositional data outcome, often also interested changes outcomes fixed duration time reallocated one compositional component another, components remain constant. changes can examined using compositional isotemporal substitution model. multilevelcoda, extend model multilevel approach test -person within-person changes. substitution models can computed using substitution() function, following arguments:","code":""},{"path":"https://florale.github.io/multilevelcoda/articles/B-composition-MLM.html","id":"between-person-substitution-model","dir":"Articles","previous_headings":"Substitution model","what":"Between-person substitution model","title":"Multilevel Models with Compositional Predictors","text":"example examines changes stress different pairwise substitution sleep-wake behaviours 5 minutes, -person level. output contains multiple data sets results compositional components. results changes stress sleep (TST) substituted 5 minutes, averaged across levels covariates. None results significant, given credible intervals cross 0, showing increasing sleep (TST) expense behaviours associated changes stress. Notice column indicating levels convariates, indicating results averaged.","code":"bsubm <- substitution(object = m, delta = 5,                        level = \"between\", ref = \"grandmean\") knitr::kable(summary(bsubm, level = \"between\", to = \"TST\"))"},{"path":"https://florale.github.io/multilevelcoda/articles/B-composition-MLM.html","id":"within-person-substitution-model","dir":"Articles","previous_headings":"Substitution model","what":"Within-person substitution model","title":"Multilevel Models with Compositional Predictors","text":"Let’s now take look stress changes different pairwise sleep-wake behaviours substituted 5 minutes, within-person level. Results 5 minute substitution. within-person level, significant results substitution sleep (TST) time awake bed (WAKE) 5 minutes, behaviours. Increasing sleep expense time spent awake bed predicted 0.02 higher stress [95% CI 0.00, 0.03], given day.","code":"# Within-person substitution wsubm <- substitution(object = m, delta = 5,                        level = \"within\", ref = \"grandmean\") knitr::kable(summary(wsubm, level = \"within\", to = \"TST\"))"},{"path":"https://florale.github.io/multilevelcoda/articles/B-composition-MLM.html","id":"more-interesting-substitution-models","dir":"Articles","previous_headings":"Substitution model","what":"More interesting substitution models","title":"Multilevel Models with Compositional Predictors","text":"can learn different types substitution models atCompositional Multilevel Substitution Analysis.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/articles/C-composition-MMLM.html","id":"computing-compositions-and-isometric-log-ratio-coordinates-","dir":"Articles","previous_headings":"Multilevel model with compositional outcomes.","what":"Computing compositions and isometric log ratio coordinates.","title":"Multilevel Model with Compositional Outcomes","text":"ILR coordinates outcomes can calculated using complr() functions.","code":"cilr <- complr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\", total = 1440)  head(cilr$TotalILR) #> NULL"},{"path":"https://florale.github.io/multilevelcoda/articles/C-composition-MMLM.html","id":"fitting-model","dir":"Articles","previous_headings":"Multilevel model with compositional outcomes.","what":"Fitting model","title":"Multilevel Model with Compositional Outcomes","text":"model multilevel compositional outcomes multivariate, multiple ILR coordinate outcomes,predicted set predictors. brms model can fitted using brmcoda() function. summary() model. can see stress significantly predicted ilr1 ilr2.","code":"mv <- brmcoda(complr = cilr,               formula = mvbind(ilr1, ilr2, ilr3, ilr4) ~ Stress + (1 | ID),               cores = 8, seed = 123, backend = \"cmdstanr\") #> Warning: In the future, 'rescor' will be set to FALSE by default for all models. It is thus #> recommended to explicitely set 'rescor' via 'set_rescor' instead of using the default. summary(mv) #>  Family: MV(gaussian, gaussian, gaussian, gaussian)  #>   Links: mu = identity; sigma = identity #>          mu = identity; sigma = identity #>          mu = identity; sigma = identity #>          mu = identity; sigma = identity  #> Formula: ilr1 ~ Stress + (1 | ID)  #>          ilr2 ~ Stress + (1 | ID)  #>          ilr3 ~ Stress + (1 | ID)  #>          ilr4 ~ Stress + (1 | ID)  #>    Data: tmp (Number of observations: 3540)  #>   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; #>          total post-warmup draws = 4000 #>  #> Multilevel Hyperparameters: #> ~ID (Number of levels: 266)  #>                    Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(ilr1_Intercept)     0.33      0.02     0.30     0.37 1.00     1228     2060 #> sd(ilr2_Intercept)     0.30      0.01     0.28     0.33 1.00     1134     1929 #> sd(ilr3_Intercept)     0.39      0.02     0.35     0.43 1.00     1731     2763 #> sd(ilr4_Intercept)     0.30      0.02     0.27     0.33 1.00     1710     2483 #>  #> Regression Coefficients: #>                Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> ilr1_Intercept    -0.44      0.02    -0.48    -0.39 1.00      942     1598 #> ilr2_Intercept     1.47      0.02     1.42     1.51 1.01      876     1608 #> ilr3_Intercept    -0.88      0.03    -0.94    -0.82 1.00     1740     2565 #> ilr4_Intercept     0.65      0.02     0.60     0.69 1.00     1648     2562 #> ilr1_Stress       -0.01      0.00    -0.02    -0.00 1.00     5967     3302 #> ilr2_Stress        0.01      0.00     0.00     0.01 1.00     5446     3533 #> ilr3_Stress        0.00      0.01    -0.01     0.01 1.00     6975     3101 #> ilr4_Stress        0.01      0.00    -0.00     0.01 1.00     6794     3387 #>  #> Further Distributional Parameters: #>            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sigma_ilr1     0.44      0.01     0.43     0.45 1.00     6228     3088 #> sigma_ilr2     0.38      0.00     0.37     0.39 1.00     6496     3182 #> sigma_ilr3     0.70      0.01     0.68     0.71 1.00     5403     3385 #> sigma_ilr4     0.53      0.01     0.51     0.54 1.00     5484     3418 #>  #> Residual Correlations:  #>                   Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> rescor(ilr1,ilr2)    -0.54      0.01    -0.57    -0.52 1.00     5503     3659 #> rescor(ilr1,ilr3)    -0.18      0.02    -0.21    -0.14 1.00     5662     3335 #> rescor(ilr2,ilr3)    -0.05      0.02    -0.08    -0.02 1.00     4974     3475 #> rescor(ilr1,ilr4)     0.11      0.02     0.07     0.14 1.00     6096     3480 #> rescor(ilr2,ilr4)    -0.05      0.02    -0.08    -0.01 1.00     5544     3305 #> rescor(ilr3,ilr4)     0.56      0.01     0.54     0.58 1.00     5224     3252 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://florale.github.io/multilevelcoda/articles/C-composition-MMLM.html","id":"bayes-factor-for-compositional-multilevel-modelling","dir":"Articles","previous_headings":"","what":"Bayes Factor for compositional multilevel modelling","title":"Multilevel Model with Compositional Outcomes","text":"often interested whether predictor significantly predict overall composition, addition individual ILR coordinates. Bayesian, can done comparing marginal likelihoods two models. Bayes Factors (BFs) indices relative evidence one model another. context compositional multilevel modelling, Bayes Factors provide two main useful functions: Testing single parameters within model Comparing models can utilize Bayes factors answer following question: “model (.e., set composition predictors, expressed ILRs) likely produced observed data?” Let’s examine whether stress predicts overall sleep-wake composition. Note: use Bayes factors, brmsfit models must fitted additional non-default argument save_pars = save_pars(= TRUE). can now compare models bayesfactor_models() function \\(BF\\) < 1, data favours intercept model, showing insufficient evidence stress predicting overall sleep-wake composition. Bayes factors provide intuitive measure strength evidence one model among different models. Check bayestestR packages several useful functions related BFs.","code":"# intercept only mv0 <- brmcoda(complr = cilr,                formula = mvbind(ilr1, ilr2, ilr3, ilr4) ~ 1 + (1 | ID),                iter = 6000, chains = 8, cores = 8, seed = 123, warmup = 1000,                backend = \"cmdstanr\", save_pars = save_pars(all = TRUE)) #> Warning: In the future, 'rescor' will be set to FALSE by default for all models. It is thus #> recommended to explicitely set 'rescor' via 'set_rescor' instead of using the default. # full model mv <- brmcoda(complr = cilr,               formula = mvbind(ilr1, ilr2, ilr3, ilr4) ~ Stress + (1 | ID),               iter = 6000, chains = 8, cores = 8, seed = 123, warmup = 1000,               backend = \"cmdstanr\", save_pars = save_pars(all = TRUE)) #> Warning: In the future, 'rescor' will be set to FALSE by default for all models. It is thus #> recommended to explicitely set 'rescor' via 'set_rescor' instead of using the default. bayes_factor(mv$model, mv0$model) #> Iteration: 1 #> Iteration: 2 #> Iteration: 3 #> Iteration: 4 #> Iteration: 5 #> Iteration: 6 #> Iteration: 7 #> Iteration: 8 #> Iteration: 9 #> Iteration: 10 #> Iteration: 11 #> Iteration: 12 #> Iteration: 13 #> Iteration: 14 #> Iteration: 15 #> Iteration: 16 #> Iteration: 17 #> Iteration: 18 #> Iteration: 19 #> Iteration: 1 #> Iteration: 2 #> Iteration: 3 #> Iteration: 4 #> Iteration: 5 #> Iteration: 6 #> Iteration: 7 #> Iteration: 8 #> Iteration: 9 #> Iteration: 10 #> Iteration: 11 #> Iteration: 12 #> Iteration: 13 #> Iteration: 14 #> Iteration: 15 #> Iteration: 16 #> Iteration: 17 #> Iteration: 18 #> Iteration: 19 #> Iteration: 20 #> Estimated Bayes factor in favor of mv$model over mv0$model: 0.00015"},{"path":"https://florale.github.io/multilevelcoda/articles/D-substitution.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Compositional Substitution Multilevel Analysis","text":"examining relationship composition outconme, often interested outcome changes fixed unit composition (e.g., minutes behaviours day) reallocated one component another. Compositional Isotemporal Substitution Analysis can used estimate change. multilevelcoda package implements method multilevel framework offers functions - within-person levels variability. discuss 4 different substitution models vignette. begin loading necessary packages, multilevelcoda, brms (models fitting), doFuture (parallelisation), data sets mcompd (simulated compositional sleep wake variables), sbp (sequential binary partition), psub (base possible substitution).","code":"library(multilevelcoda) library(brms) library(doFuture)  data(\"mcompd\")  data(\"sbp\") data(\"psub\")  options(digits = 3) # reduce number of digits shown"},{"path":"https://florale.github.io/multilevelcoda/articles/D-substitution.html","id":"fitting-main-model","dir":"Articles","previous_headings":"","what":"Fitting main model","title":"Compositional Substitution Multilevel Analysis","text":"Let’s fit main brms model predicting Stress within-person sleep-wake behaviours (represented isometric log ratio coordinates), sex covariate, using brmcoda() function. can compute ILR coordinate predictors using complr() function. summary() model results. can see first forth within-person ILR coordinates associated stress. Interpretation multilevel ILR coordinates can often less intuitive. example, significant coefficient wilr1 shows within-person change sleep behaviours (sleep duration time awake bed combined), relative wake behaviours (moderate vigorous physical activity, light physical activity, sedentary behaviour) given day, associated stress. However, several behaviours involved coordinate, don’t know within-person change drives association. change sleep, people sleep average given day, also change time awake. , don’t know specific changes time spent across behaviours. , people sleep , behaviour spend less time ? common issue working multilevel compositional data ILR coordinates often contains information multiple compositional components. gain insights associations help interpretation, can conduct post-hoc analyses using substitution models multilevel package.","code":"cilr <- complr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\", total = 1440)  m <- brmcoda(complr = cilr,              formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                                 wilr1 + wilr2 + wilr3 + wilr4 + Female + (1 | ID),              cores = 8, seed = 123, backend = \"cmdstanr\") summary(m) #>  Family: gaussian  #>   Links: mu = identity; sigma = identity  #> Formula: Stress ~ bilr1 + bilr2 + bilr3 + bilr4 + wilr1 + wilr2 + wilr3 + wilr4 + Female + (1 | ID)  #>    Data: tmp (Number of observations: 3540)  #>   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; #>          total post-warmup draws = 4000 #>  #> Multilevel Hyperparameters: #> ~ID (Number of levels: 266)  #>               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(Intercept)     0.99      0.06     0.87     1.11 1.00     1574     2367 #>  #> Regression Coefficients: #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept     2.65      0.48     1.69     3.56 1.00     1494     2202 #> bilr1         0.11      0.32    -0.53     0.74 1.00      967     1699 #> bilr2         0.50      0.34    -0.16     1.15 1.00     1081     2071 #> bilr3         0.11      0.21    -0.31     0.53 1.00     1059     2057 #> bilr4         0.04      0.28    -0.51     0.60 1.00     1266     2174 #> wilr1        -0.34      0.12    -0.58    -0.09 1.00     2797     2882 #> wilr2         0.05      0.13    -0.21     0.32 1.00     3134     2299 #> wilr3        -0.10      0.08    -0.26     0.06 1.00     2712     2653 #> wilr4         0.24      0.10     0.04     0.44 1.00     2963     2874 #> Female       -0.41      0.17    -0.77    -0.07 1.00     1364     1823 #>  #> Further Distributional Parameters: #>       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sigma     2.38      0.03     2.33     2.44 1.00     4866     2981 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://florale.github.io/multilevelcoda/articles/D-substitution.html","id":"substitution-models","dir":"Articles","previous_headings":"","what":"Substitution models","title":"Compositional Substitution Multilevel Analysis","text":"multilevelcoda package provides 2 different methods compute substitution models, via substitution() function. Basic substitution models: -person substitution Within-person substitution Average marginal substitution models: Average marginal -person substitution Average marginal within-person substitution Tips: Substitution models often computationally demanding tasks. can speed models using parallel execution, example, using doFuture package.","code":""},{"path":"https://florale.github.io/multilevelcoda/articles/D-substitution.html","id":"basic-substitution-analysis","dir":"Articles","previous_headings":"Substitution models","what":"Basic Substitution Analysis","title":"Compositional Substitution Multilevel Analysis","text":"example examines changes stress different pairwise substitution sleep-wake behaviours period 1 5 minutes, -person level. specify level = indicate substitutional change -person level, ref = \"grandmean\" indicate substitution model using grand compositional mean reference composition. model contains covariates, substitution() average predictions across levels covariates default. Output substitution() contains multiple data set results available compositional component. results changes stress sleep (TST) substituted 10 minutes. None significant, given credible intervals cross 0, showing increasing sleep (TST) expense behaviours associated changes stress -person level. results can plotted see patterns easily using plot() function. Example -person Substitution Analysis results within-person level. within-person level, got significant results substitution sleep (TST) time awake bed (WAKE) 5 minutes, behaviours. Increasing 5 minutes sleep expense time spent awake bed predicted 0.04 higher stress [95% CI 0.01, 0.7], given day. Let’s also plot theses results. Example Within-person Substitution Analysis","code":"subm1 <- substitution(object = m, delta = 1:10,                       ref = \"grandmean\", level = c(\"between\", \"within\")) knitr::kable(summary(subm1, delta = 10, level = \"between\", to = \"TST\")) plot(subm1, to = \"TST\", level = \"between\", ref = \"grandmean\") knitr::kable(summary(subm1, delta = 10, level = \"within\", to = \"TST\")) plot(subm1, to = \"TST\", level = \"within\", ref = \"grandmean\")"},{"path":"https://florale.github.io/multilevelcoda/articles/D-substitution.html","id":"average-marginal-substitution-effects","dir":"Articles","previous_headings":"Substitution models","what":"Average Marginal Substitution Effects","title":"Compositional Substitution Multilevel Analysis","text":"average marginal models use unit compositional mean reference composition obtain average predicted group-level changes outcome every unit (e.g., individual) sample reallocates specific unit one compositional part another. difference basic substitution model yields prediction conditioned “average” person data set (e.g., using grand compositional mean reference composition). Average substitution models models generally computationally expensive basic subsitution models. models can run faster shorter walltime using parallel execution. example, set cores = 5. substitution() run 5 substitution models 5 sleep-wake behaviours parallel excuting across 5 workers. results. comparison - within-person substitution analyses sleep stress, plot using plot() ggpubr::ggarrange() functions. Example Average Marginal Substitution Analysis","code":"subm2 <- substitution(object = m, delta = 1:10,                       ref = \"clustermean\", level = c(\"between\", \"within\"),                       cores = 5) knitr::kable(summary(subm2, delta = 10, to = \"TST\")) library(ggpubr) p1 <- plot(subm2, to = \"TST\", level = \"between\", ref = \"clustermean\") p2 <- plot(subm2, to = \"TST\", level = \"within\", ref = \"clustermean\")  ggarrange(p1, p2,            ncol = 1, nrow = 2)"},{"path":"https://florale.github.io/multilevelcoda/articles/E-simmodel-diag.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Improving MCMC Sampling for Bayesian Compositional Multilevel Models","text":"vignettes, present case study encountered simulation study package multilevelcoda. Briefly, found multilevel model compositional predictors large sample size, large -person heterogeneity small within-person heterogeneity (large \\(\\sigma^2_{u}\\) small \\(\\sigma^2_{\\varepsilon}\\)) produced low bulk effective sample size (ESS). , examined diagnostics model interest explored different methods improve within-chain autocorrelation.","code":""},{"path":"https://florale.github.io/multilevelcoda/articles/E-simmodel-diag.html","id":"generating-data-from-simulation-study","dir":"Articles","previous_headings":"","what":"Generating Data from Simulation Study","title":"Improving MCMC Sampling for Bayesian Compositional Multilevel Models","text":"first generated dataset consisting 3-part behaviour composition 1200 individuals, 14 observations per individuals, large random intercept variation (\\(\\sigma^2_{u} = 1.5\\)), coupled small residual variation (\\(\\sigma^2_{\\varepsilon}: 0.5\\)). dataset dat, along variables interest.","code":"set.seed(1)  sampled_cond <- cond[condition == \"RElarge_RESsmall\" & n_parts == 3 & N == 1200 & K == 14][1] i <- 1  # condition N             <- sampled_cond[i, N] K             <- sampled_cond[i, K] rint_sd       <- sampled_cond[i, rint_sd] res_sd        <- sampled_cond[i, res_sd] run           <- sampled_cond[i, run] n_parts       <- sampled_cond[i, n_parts] sbp_n         <- sampled_cond[i, sbp] prefit_n      <- sampled_cond[i, prefit] groundtruth_n <- sampled_cond[i, groundtruth] parts         <- sampled_cond[i, parts]  # inputs sbp           <- meanscovs[[paste(sbp_n)]] prefit        <- get(prefit_n) groundtruth   <- get(groundtruth_n) parts         <- as.vector(strsplit(parts, \" \")[[1]])  simd <- with(meanscovs, rbind(   simulateData(     bm = BMeans,     wm = WMeans,     bcov = BCov,     wcov = WCov,     n = N,     k = K,     psi = psi) ))  simd[, Sleep := TST + WAKE] simd[, PA := MVPA + LPA] # ILR --------------------------------------------------- cilr <- compilr(   data = simd,   sbp = sbp,   parts = parts,   idvar = \"ID\")  tmp <- cbind(cilr$data,              cilr$BetweenILR,              cilr$WithinILR,              cilr$TotalILR)  # random effects ---------------------------------------- redat <- data.table(ID = unique(tmp$ID),                     rint = rnorm(                       n = length(unique(tmp$ID)),                       mean = 0,                       sd = rint_sd))  tmp <- merge(tmp, redat, by = \"ID\")  # outcome ----------------------------------------------- if (n_parts == 3) {   tmp[, sleepy :=  rnorm(     n = nrow(simd),     mean = groundtruth$b_Intercept  + rint +       (groundtruth$b_bilr1 * bilr1) +       (groundtruth$b_bilr2 * bilr2) +       (groundtruth$b_wilr1 * wilr1) +       (groundtruth$b_wilr2 * wilr2),     sd = res_sd)] }            simd$sleepy <- tmp$sleepy  cilr <- compilr(simd, sbp, parts, total = 1440, idvar = \"ID\") dat <- cbind(cilr$data, cilr$BetweenILR, cilr$WithinILR) knitr::kable(head(dat[, .(ID, sleepy, Sleep, PA, SB,                           bilr1, bilr2, wilr1, wilr2)]))"},{"path":"https://florale.github.io/multilevelcoda/articles/E-simmodel-diag.html","id":"example-models","dir":"Articles","previous_headings":"","what":"Example Models","title":"Improving MCMC Sampling for Bayesian Compositional Multilevel Models","text":"model interest multilevel model 3-part composition (Sleep, Physical Activity, Sedentary Behaviour), expressed 2 sets 2-part within- \\(ilr\\) coordinates predicting sleepiness. summary model indicates bulk ESS values constant varying intercept well constant coefficients \\(ilr\\) coordinates low. inspection density trace lots parameters show areas samples drawn outside parameter space, strong evidence non-convergence. Density Trace Plot Parameters Low ESS","code":"fit <- brmcoda(cilr,                 sleepy ~ bilr1 + bilr2 + wilr1 + wilr2 + (1 | ID),                cores = 4,                chains = 4,                iter = 3000,                warmup = 500,                seed = 13,                backend = \"cmdstanr\" ) summary(fit) #>  Family: gaussian  #>   Links: mu = identity; sigma = identity  #> Formula: sleepy ~ bilr1 + bilr2 + wilr1 + wilr2 + (1 | ID)  #>    Data: tmp (Number of observations: 16800)  #>   Draws: 4 chains, each with iter = 3000; warmup = 500; thin = 1; #>          total post-warmup draws = 10000 #>  #> Group-Level Effects:  #> ~ID (Number of levels: 1200)  #>               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(Intercept)     1.22      0.03     1.17     1.27 1.01      488      770 #>  #> Population-Level Effects:  #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept     2.35      0.15     2.04     2.65 1.02      286      640 #> bilr1         0.19      0.18    -0.18     0.52 1.01      312      520 #> bilr2         0.28      0.14    -0.00     0.56 1.02      280      532 #> wilr1        -0.80      0.03    -0.85    -0.74 1.00     9447     7579 #> wilr2        -0.26      0.02    -0.31    -0.22 1.00     9731     7932 #>  #> Family Specific Parameters:  #>       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sigma     0.71      0.00     0.71     0.72 1.00    17695     7853 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). plot(fit, variable = c(\"b_Intercept\", \"b_bilr1\", \"b_bilr2\", \"sd_ID__Intercept\"), regex = TRUE)"},{"path":"https://florale.github.io/multilevelcoda/articles/E-simmodel-diag.html","id":"improving-within-chain-autocorrelation-of-mcmc-sampling","dir":"Articles","previous_headings":"","what":"Improving within-chain autocorrelation of MCMC sampling","title":"Improving MCMC Sampling for Bayesian Compositional Multilevel Models","text":"low bulk ESS random intercept model observed previously, example, seehere . explored two potential solution improve MCMC sampling efficiency: increasing posterior draws reparameterisation.","code":""},{"path":"https://florale.github.io/multilevelcoda/articles/E-simmodel-diag.html","id":"increased-posterior-draws","dir":"Articles","previous_headings":"Improving within-chain autocorrelation of MCMC sampling","what":"Increased posterior draws","title":"Improving MCMC Sampling for Bayesian Compositional Multilevel Models","text":"first step, test increasing iterations warmups helps. Density Trace Plot increasing iterations warmups good sign increasing interation warmups increase ESS, supported trace plots. ratios ESS b_Intercept, b_bilr1, b_bilr2 sd_ID_intercept b_wilr1, b_wilr2, sigma remain somewhat concern.","code":"fit_it <- brmcoda(cilr,                    sleepy ~ bilr1 + bilr2 + wilr1 + wilr2 + (1 | ID),                   cores = 4,                   chains = 4,                   iter = 10000,                   warmup = 1000,                   seed = 13,                   backend = \"cmdstanr\" ) print(rstan::get_elapsed_time(fit$Model$fit_it)) #> Error in object@mode: no applicable method for `@` applied to an object of class \"NULL\" summary(fit_it) #>  Family: gaussian  #>   Links: mu = identity; sigma = identity  #> Formula: sleepy ~ bilr1 + bilr2 + wilr1 + wilr2 + (1 | ID)  #>    Data: tmp (Number of observations: 16800)  #>   Draws: 4 chains, each with iter = 10000; warmup = 1000; thin = 1; #>          total post-warmup draws = 36000 #>  #> Group-Level Effects:  #> ~ID (Number of levels: 1200)  #>               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(Intercept)     1.22      0.03     1.17     1.27 1.00     1997     3971 #>  #> Population-Level Effects:  #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept     2.37      0.15     2.08     2.66 1.00     1130     2114 #> bilr1         0.18      0.18    -0.17     0.54 1.01      938     2477 #> bilr2         0.29      0.14     0.03     0.56 1.00     1182     2510 #> wilr1        -0.80      0.03    -0.85    -0.74 1.00    44344    28415 #> wilr2        -0.26      0.02    -0.31    -0.22 1.00    47155    29351 #>  #> Family Specific Parameters:  #>       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sigma     0.71      0.00     0.71     0.72 1.00    62444    27585 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). plot(fit_it, variable = c(\"b_Intercept\", \"b_bilr1\", \"b_bilr2\", \"sd_ID__Intercept\"), regex = TRUE)"},{"path":"https://florale.github.io/multilevelcoda/articles/E-simmodel-diag.html","id":"centered-parameterisation","dir":"Articles","previous_headings":"Improving within-chain autocorrelation of MCMC sampling","what":"Centered Parameterisation","title":"Improving MCMC Sampling for Bayesian Compositional Multilevel Models","text":"default, brms uses non-centered parametrization. However, Betancourt Girolami (2015) explains correlation depends amount data, efficacy parameterization depends relative strength data. small data sets, computational implementation model using non-parameterisation efficient. enough data, however, parameterization unnecessary may efficient use centered parameterisation. Reparameterisation discussed Betancourt’s case study Nicenboim, Schad, Vasishth’s chapter complex models reparameterisation. Given small variation large simulated data set, going test centered parameterisation improves sampling. first obtain Stan code example model can manually edit generated brms code center parameters. modified Stan code Now build data model sample cmdstanr Indeed, centered parameterisation improved ESS parameters. Density Trace Plot using centered parameterisation","code":"make_stancode(sleepy ~ bilr1 + bilr2 + wilr1 + wilr2 + (1 | ID), data = dat) #> // generated with brms 2.19.0 #> functions { #> } #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   // data for group-level effects of ID 1 #>   int<lower=1> N_1;  // number of grouping levels #>   int<lower=1> M_1;  // number of coefficients per level #>   int<lower=1> J_1[N];  // grouping indicator per observation #>   // group-level predictor values #>   vector[N] Z_1_1; #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   int Kc = K - 1; #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   vector[Kc] b;  // population-level effects #>   real Intercept;  // temporary intercept for centered predictors #>   real<lower=0> sigma;  // dispersion parameter #>   vector<lower=0>[M_1] sd_1;  // group-level standard deviations #>   vector[N_1] z_1[M_1];  // standardized group-level effects #> } #> transformed parameters { #>   vector[N_1] r_1_1;  // actual group-level effects #>   real lprior = 0;  // prior contributions to the log posterior #>   r_1_1 = (sd_1[1] * (z_1[1])); #>   lprior += student_t_lpdf(Intercept | 3, 2.1, 2.5); #>   lprior += student_t_lpdf(sigma | 3, 0, 2.5) #>     - 1 * student_t_lccdf(0 | 3, 0, 2.5); #>   lprior += student_t_lpdf(sd_1 | 3, 0, 2.5) #>     - 1 * student_t_lccdf(0 | 3, 0, 2.5); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     // initialize linear predictor term #>     vector[N] mu = rep_vector(0.0, N); #>     mu += Intercept; #>     for (n in 1:N) { #>       // add more terms to the linear predictor #>       mu[n] += r_1_1[J_1[n]] * Z_1_1[n]; #>     } #>     target += normal_id_glm_lpdf(Y | Xc, mu, b, sigma); #>   } #>   // priors including constants #>   target += lprior; #>   target += std_normal_lpdf(z_1[1]); #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> } m_centered <- cmdstan_model(\"fit_centered.stan\") print(m_centered) #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int<lower=1> K;  // number of population-level effects #>   matrix[N, K] X;  // population-level design matrix #>   // data for group-level effects of ID 1 #>   int<lower=1> N_1;  // number of grouping levels #>   int<lower=1> M_1;  // number of coefficients per level #>   int<lower=1> J_1[N];  // grouping indicator per observation #>   // group-level predictor values #>   vector[N] Z_1_1; #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>   int Kc = K - 1; #>   matrix[N, Kc] Xc;  // centered version of X without an intercept #>   vector[Kc] means_X;  // column means of X before centering #>   for (i in 2:K) { #>     means_X[i - 1] = mean(X[, i]); #>     Xc[, i - 1] = X[, i] - means_X[i - 1]; #>   } #> } #> parameters { #>   vector[Kc] b;  // population-level effects #>   real Intercept;  // temporary intercept for centered predictors #>   real<lower=0> sigma;  // dispersion parameter #>   vector<lower=0>[M_1] sd_1;  // group-level standard deviations #>   vector[N_1] z_1[M_1];  // standardized group-level effects #>    #>   // Manually added #>    vector[N_1] r_1_1;  // actual group-level effects #> } #> //transformed parameters { #> //  vector[N_1] r_1_1;  // actual group-level effects #> //  real lprior = 0;  // prior contributions to the log posterior #> //  r_1_1 = (sd_1[1] * (z_1[1])); #> //  lprior += student_t_lpdf(Intercept | 3, 2, 2.5); #> //  lprior += student_t_lpdf(sigma | 3, 0, 2.5) #> //    - 1 * student_t_lccdf(0 | 3, 0, 2.5); #> //  lprior += student_t_lpdf(sd_1 | 3, 0, 2.5) #> //    - 1 * student_t_lccdf(0 | 3, 0, 2.5); #> //} #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     // initialize linear predictor term #>     vector[N] mu = rep_vector(0.0, N); #>     mu += Intercept; #>     for (n in 1:N) { #>       // add more terms to the linear predictor #>       mu[n] += r_1_1[J_1[n]] * Z_1_1[n]; #>        #>     } #>     target += normal_id_glm_lpdf(Y | Xc, mu, b, sigma); #>   } #>   // priors including constants #>   // target += lprior; #>   // target += std_normal_lpdf(z_1[1]); #>  #>   target += student_t_lpdf(Intercept | 3, 2, 2.5); #>   target += student_t_lpdf(sigma | 3, 0, 2.5) #>     - 1 * student_t_lccdf(0 | 3, 0, 2.5); #>   target += student_t_lpdf(sd_1 | 3, 0, 2.5) #>     - 1 * student_t_lccdf(0 | 3, 0, 2.5); #>      #>   // Manually added #>   target += normal_lpdf(r_1_1 | 0, sd_1[1]); #>  #>   // manual soft sum to zero constraint #>   // target += normal_lpdf(sum(r_1_1) | 0, 0.0001 *N_1); #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept - dot_product(means_X, b); #> } sdat <- make_standata(sleepy ~ bilr1 + bilr2 + wilr1 + wilr2 + (1 | ID), data = dat) fit_centered <- m_centered$sample(data = sdat,                                   parallel_chains = 4,                                   iter_sampling = 2500,                                   iter_warmup = 500) bm_centered <- brm(sleepy ~ bilr1 + bilr2 + wilr1 + wilr2 + (1 | ID), data = dat, empty = TRUE) bm_centered$fit <- rstan::read_stan_csv(fit_centered$output_files()) bm_centered <- rename_pars(bm_centered) summary(bm_centered) #>  Family: gaussian  #>   Links: mu = identity; sigma = identity  #> Formula: sleepy ~ bilr1 + bilr2 + wilr1 + wilr2 + (1 | ID)  #>    Data: dat (Number of observations: 16800)  #>   Draws: 4 chains, each with iter = 3000; warmup = 500; thin = 1; #>          total post-warmup draws = 10000 #>  #> Group-Level Effects:  #> ~ID (Number of levels: 1200)  #>               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(Intercept)     1.22      0.03     1.17     1.27 1.00     9848     9674 #>  #> Population-Level Effects:  #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept     2.36      0.15     2.06     2.66 1.00    10497     5483 #> bilr1         0.19      0.18    -0.17     0.55 1.00    10539     5853 #> bilr2         0.29      0.14     0.01     0.56 1.00    10683     5784 #> wilr1        -0.80      0.03    -0.85    -0.74 1.00    10030     7217 #> wilr2        -0.26      0.02    -0.31    -0.22 1.00     9805     7335 #>  #> Family Specific Parameters:  #>       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sigma     0.71      0.00     0.71     0.72 1.00     8197     6616 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). plot(bm_centered, pars = c(\"b_Intercept\", \"b_bilr1\", \"b_bilr2\", \"sd_ID__Intercept\"), regex = TRUE)"},{"path":"https://florale.github.io/multilevelcoda/articles/E-simmodel-diag.html","id":"computational-time","dir":"Articles","previous_headings":"","what":"Computational Time","title":"Improving MCMC Sampling for Bayesian Compositional Multilevel Models","text":"took 607.051 obtain average-ish 1000 across four parameters initially low ESS. achieve ESS 10 000 across parameters, simplying increasing iterations take around 6070.51, whereas centered parameterisation takes around 5292.319.","code":"# example model print(rstan::get_elapsed_time(fit$Model$fit)) #>         warmup sample #> chain:1   16.7   36.6 #> chain:2   14.6   36.6 #> chain:3   19.3   36.3 #> chain:4   15.4   36.7  # increased iter print(rstan::get_elapsed_time(fit_it$Model$fit)) #>         warmup sample #> chain:1   23.2    128 #> chain:2   20.9    129 #> chain:3   25.3    129 #> chain:4   21.8    129  # centered parameterisation rstan::get_elapsed_time(bm_centered$fit) #>         warmup sample #> chain:1    200   1125 #> chain:2    199   1121 #> chain:3    202   1121 #> chain:4    200   1124"},{"path":"https://florale.github.io/multilevelcoda/articles/E-simmodel-diag.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Improving MCMC Sampling for Bayesian Compositional Multilevel Models","text":"multilevelcoda demonstrates excellent performances across different conditions number individuals, number observations, number compositional parts, magnitude modeled variance (full results simulation study published later date). However, case large data small sample variation, recommend centered parameterisation increasing iterations achieve efficient MCMC sampling. Based results case study, centered parameterisation give reliable results terms ESS--draw ratios parameters computational time.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Flora Le. Author, maintainer. Joshua F. Wiley. Author.","code":""},{"path":"https://florale.github.io/multilevelcoda/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Le F, Wiley J (2024). multilevelcoda: Estimate Bayesian Multilevel Models Compositional Data. R package version 1.3.0.1,  https://github.com/florale/multilevelcoda, https://florale.github.io/multilevelcoda/.","code":"@Manual{,   title = {multilevelcoda: Estimate Bayesian Multilevel Models for Compositional Data},   author = {Flora Le and Joshua F. Wiley},   year = {2024},   note = {R package version 1.3.0.1,  https://github.com/florale/multilevelcoda},   url = {https://florale.github.io/multilevelcoda/}, }"},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"multilevelcoda","text":"package provides functions model compositional data multilevel framework using full Bayesian inference. integrates principes Compositional Data Analysis (CoDA) Multilevel Modelling supports compositional data outcome predictors wide range generalized (non-)linear multivariate multilevel models.","code":""},{"path":"https://florale.github.io/multilevelcoda/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"multilevelcoda","text":"install latest release version CRAN, run current developmental version can downloaded github via multilevelcoda built brms, based Stan, C++ compiler required. program Rtools (available https://cran.r-project.org/bin/windows/Rtools/) comes C++ compiler Windows. Mac, Xcode required. instructions get compilers running, see prerequisites section https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started.","code":"install.packages(\"multilevelcoda\") if (!requireNamespace(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"florale/multilevelcoda\")"},{"path":"https://florale.github.io/multilevelcoda/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"multilevelcoda","text":"can learn package vignettes: Introduction Compositional Multilevel Modelling Multilevel Models Compositional Predictors Multilevel Models Compositional Outcome Compositional Substitution Multilevel Analysis","code":""},{"path":"https://florale.github.io/multilevelcoda/index.html","id":"citing-multilevelcoda-and-related-software","dir":"","previous_headings":"","what":"Citing multilevelcoda and related software","title":"multilevelcoda","text":"TBA","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/VarCorr.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Variance and Correlation Components — VarCorr.brmcoda","title":"Extract Variance and Correlation Components — VarCorr.brmcoda","text":"Calculates estimated standard deviations, correlations covariances group-level terms brmsfit object brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/VarCorr.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Variance and Correlation Components — VarCorr.brmcoda","text":"","code":"# S3 method for brmcoda VarCorr(x, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/VarCorr.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Variance and Correlation Components — VarCorr.brmcoda","text":"x object class brmcoda. ... arguments passed VarCorr.brmsfit.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/VarCorr.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Variance and Correlation Components — VarCorr.brmcoda","text":"list lists (one per grouping factor), three elements: matrix containing standard deviations, array containing correlation matrix, array containing covariance matrix variances diagonal.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/VarCorr.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Variance and Correlation Components — VarCorr.brmcoda","text":"","code":"# \\donttest{ ## fit a model if(requireNamespace(\"cmdstanr\")){   m <- brmcoda(complr = complr(data = mcompd, sbp = sbp,                                parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                                idvar = \"ID\", total = 1440),   formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +     wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),   chain = 1, iter = 500,   backend = \"cmdstanr\")      VarCorr(m) }# } #> Loading required namespace: cmdstanr #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/as.data.frame.complr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Compositional Data from complr object. — as.data.frame.complr","title":"Extract Compositional Data from complr object. — as.data.frame.complr","text":"Extract amounts compositions conventional formats data.frames, matrices, arrays.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/as.data.frame.complr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Compositional Data from complr object. — as.data.frame.complr","text":"","code":"# S3 method for complr as.data.frame(x, row.names = NULL, optional = TRUE, ...)  # S3 method for complr as.matrix(x, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/as.data.frame.complr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Compositional Data from complr object. — as.data.frame.complr","text":"x object class complr. row.names, optional Unused added consistency .data.frame generic. ... generic argument, use.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/basesub.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Pairwise Substitution — basesub","title":"Base Pairwise Substitution — basesub","text":"Make data set possible pairwise substitution composition can used base substitution models.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/basesub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Pairwise Substitution — basesub","text":"","code":"basesub(parts)"},{"path":"https://florale.github.io/multilevelcoda/reference/basesub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Pairwise Substitution — basesub","text":"parts character vector specifying names compositional variables used.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/basesub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base Pairwise Substitution — basesub","text":"data table possible pairwise substitution.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/basesub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base Pairwise Substitution — basesub","text":"","code":"ps1 <- basesub(parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\")) print(ps1) #>       TST  WAKE  MVPA   LPA    SB #>     <num> <num> <num> <num> <num> #>  1:     1    -1     0     0     0 #>  2:     1     0    -1     0     0 #>  3:     1     0     0    -1     0 #>  4:     1     0     0     0    -1 #>  5:    -1     1     0     0     0 #>  6:     0     1    -1     0     0 #>  7:     0     1     0    -1     0 #>  8:     0     1     0     0    -1 #>  9:    -1     0     1     0     0 #> 10:     0    -1     1     0     0 #> 11:     0     0     1    -1     0 #> 12:     0     0     1     0    -1 #> 13:    -1     0     0     1     0 #> 14:     0    -1     0     1     0 #> 15:     0     0    -1     1     0 #> 16:     0     0     0     1    -1 #> 17:    -1     0     0     0     1 #> 18:     0    -1     0     0     1 #> 19:     0     0    -1     0     1 #> 20:     0     0     0    -1     1 #>       TST  WAKE  MVPA   LPA    SB  ps2 <- basesub(c(\"WAKE\", \"MVPA\", \"LPA\", \"SB\")) print(ps2) #>      WAKE  MVPA   LPA    SB #>     <num> <num> <num> <num> #>  1:     1    -1     0     0 #>  2:     1     0    -1     0 #>  3:     1     0     0    -1 #>  4:    -1     1     0     0 #>  5:     0     1    -1     0 #>  6:     0     1     0    -1 #>  7:    -1     0     1     0 #>  8:     0    -1     1     0 #>  9:     0     0     1    -1 #> 10:    -1     0     0     1 #> 11:     0    -1     0     1 #> 12:     0     0    -1     1"},{"path":"https://florale.github.io/multilevelcoda/reference/bayes_factor.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayes Factors from Marginal Likelihoods — bayes_factor.brmcoda","title":"Bayes Factors from Marginal Likelihoods — bayes_factor.brmcoda","text":"Compute Bayes factors marginal likelihoods","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bayes_factor.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayes Factors from Marginal Likelihoods — bayes_factor.brmcoda","text":"","code":"# S3 method for brmcoda bayes_factor(x1, x2, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/bayes_factor.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayes Factors from Marginal Likelihoods — bayes_factor.brmcoda","text":"x1 brmcoda object. x2 Another brmcoda object based responses. ... arguments passed bayes_factor.brmsfit.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Bayesian generalised (non-)linear multilevel compositional model via full Bayesian inference — brmcoda","title":"Fit Bayesian generalised (non-)linear multilevel compositional model via full Bayesian inference — brmcoda","text":"Fit brm model multilevel ILR coordinates","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Bayesian generalised (non-)linear multilevel compositional model via full Bayesian inference — brmcoda","text":"","code":"brmcoda(complr, formula, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Bayesian generalised (non-)linear multilevel compositional model via full Bayesian inference — brmcoda","text":"complr complr object containing data composition, ILR coordinates, variables used model. formula object class formula, brmsformula: symbolic description model fitted. Details model specification can found brmsformula. ... arguments passed brm.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Bayesian generalised (non-)linear multilevel compositional model via full Bayesian inference — brmcoda","text":"brmcoda two elements complr object class complr used brm model. model object class brmsfit, contains posterior draws along many useful information model.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Bayesian generalised (non-)linear multilevel compositional model via full Bayesian inference — brmcoda","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){   cilr <- complr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")      # inspects ILRs before passing to brmcoda   names(cilr$between_logratio)   names(cilr$within_logratio)   names(cilr$logratio)      # model with compositional predictor at between and within-person levels   m1 <- brmcoda(complr = cilr,                 formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                                    wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),                 chain = 1, iter = 500,                 backend = \"cmdstanr\")      # model with compositional outcome   m2 <- brmcoda(complr = cilr,                 formula = mvbind(ilr1, ilr2, ilr3, ilr4) ~ Stress + Female + (1 | ID),                 chain = 1, iter = 500,                 backend = \"cmdstanr\")   }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":null,"dir":"Reference","previous_headings":"","what":"Between-person Simple Substitution — bsub","title":"Between-person Simple Substitution — bsub","text":"function alias substitution estimates difference outcome compositional parts substituted specific unit(s) level using single reference composition (e.g., compositional mean sample level). recommended users run substitution model using substitution function.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Between-person Simple Substitution — bsub","text":"","code":"bsub(   object,   delta,   basesub,   summary = TRUE,   ref = \"grandmean\",   level = \"between\",   weight = \"equal\",   scale = c(\"response\", \"linear\"),   cores = NULL,   ... )"},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Between-person Simple Substitution — bsub","text":"object fitted brmcoda object. delta integer, numeric value vector indicating amount substituted change compositional parts. basesub data.frame data.table base possible substitution compositional parts. data set can computed using function basesub. NULL, possible pairwise substitution compositional parts used. summary logical value. estimate level reference grid (FALSE) average (TRUE) returned? Default TRUE. applicable model covariates addition isometric log-ratio coordinates (.e., adjusted model). ref Either character value vector dataset. Can \"grandmean\" /\"clustermean\", data.frame data.table user's specified reference grid consisting combinations covariates predictions made. User's specified reference grid possible simple substitution. Single level models default \"grandmean\". level character string vector. estimate multilevel models focus \"\" /\"within\" \"aggregate\" variance? Single-level models default \"aggregate\". weight character value specifying weight use calculation reference composition. \"equal\", give equal weight units (e.g., individuals). \"proportional\", weights proportion frequencies units averaged (e.g., observations across individuals). Default \"equal\" ref = \"grandmean\" \"proportional\" ref = \"clustermean\". scale Either \"response\" \"linear\". \"response\", results returned scale response variable. \"linear\", results returned scale linear predictor term, without applying inverse link function transformations. cores Number cores use executing chains parallel, recommend setting mc.cores option many processors hardware RAM allow (number compositional parts). non-Windows OS non-interactive R sessions, forking used instead PSOCK clusters. ... currently ignored.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Between-person Simple Substitution — bsub","text":"list containing results multilevel compositional substitution model. first six lists contain results substitution estimation compositional part. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. Reference Either grandmean, clustermean, users.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/bsub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Between-person Simple Substitution — bsub","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){ cilr <- complr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\", total = 1440)  # model with compositional predictor at between and between-person levels m <- brmcoda(complr = cilr,               formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                                  wilr1 + wilr2 + wilr3 + wilr4 + Female + (1 | ID),               chain = 1, iter = 500,              backend = \"cmdstanr\") subm <- bsub(object = m, basesub = psub, delta = 5) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":null,"dir":"Reference","previous_headings":"","what":"Between-person Average Substitution — bsubmargins","title":"Between-person Average Substitution — bsubmargins","text":"function alias substitution estimates difference outcome compositional parts substituted specific unit(s) level using cluster mean (e.g., compositional mean individual level) reference composition. recommended users run substitution model using substitution function.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Between-person Average Substitution — bsubmargins","text":"","code":"bsubmargins(   object,   delta,   basesub,   ref = \"clustermean\",   level = \"between\",   weight = \"proportional\",   scale = c(\"response\", \"linear\"),   cores = NULL,   ... )"},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Between-person Average Substitution — bsubmargins","text":"object fitted brmcoda object. delta integer, numeric value vector indicating amount substituted change compositional parts. basesub data.frame data.table base possible substitution compositional parts. data set can computed using function basesub. NULL, possible pairwise substitution compositional parts used. ref Either character value vector dataset. Can \"grandmean\" /\"clustermean\", data.frame data.table user's specified reference grid consisting combinations covariates predictions made. User's specified reference grid possible simple substitution. Single level models default \"grandmean\". level character string vector. estimate multilevel models focus \"\" /\"within\" \"aggregate\" variance? Single-level models default \"aggregate\". weight character value specifying weight use calculation reference composition. \"equal\", give equal weight units (e.g., individuals). \"proportional\", weights proportion frequencies units averaged (e.g., observations across individuals). Default \"equal\" ref = \"grandmean\" \"proportional\" ref = \"clustermean\". scale Either \"response\" \"linear\". \"response\", results returned scale response variable. \"linear\", results returned scale linear predictor term, without applying inverse link function transformations. cores Number cores use executing chains parallel, recommend setting mc.cores option many processors hardware RAM allow (number compositional parts). non-Windows OS non-interactive R sessions, forking used instead PSOCK clusters. ... currently ignored.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Between-person Average Substitution — bsubmargins","text":"list containing results multilevel compositional substitution model. first six lists contain results substitution estimation compositional part. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. Reference Either grandmean, clustermean, users.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/bsubmargins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Between-person Average Substitution — bsubmargins","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){ cilr <- complr(data = mcompd[ID %in% 1:10, .SD[1:3], by = ID], sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\", total = 1440)  m <- brmcoda(complr = cilr,               formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 + wilr1 +                                  wilr2 + wilr3 + wilr4 + Female + (1 | ID),               chains = 1, iter = 500,              backend = \"cmdstanr\")               subm <- bsubmargins(object = m, basesub = psub, delta = 5) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/build.rg.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference Grid for substitution model. — build.rg","title":"Reference Grid for substitution model. — build.rg","text":"Build dataset fitted.brmcoda used substitution model","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/build.rg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference Grid for substitution model. — build.rg","text":"","code":"build.rg(object, ref, level, weight, factors = \"all\", fill = FALSE)"},{"path":"https://florale.github.io/multilevelcoda/reference/build.rg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reference Grid for substitution model. — build.rg","text":"object fitted brmcoda object. ref Either character value vector dataset. Can \"grandmean\" /\"clustermean\", data.frame data.table user's specified reference grid consisting combinations covariates predictions made. User's specified reference grid possible simple substitution. Single level models default \"grandmean\". level character string vector. estimate multilevel models focus \"\" /\"within\" \"aggregate\" variance? Single-level models default \"aggregate\". weight character value specifying weight use calculation reference composition. \"equal\", give equal weight units (e.g., individuals). \"proportional\", weights proportion frequencies units averaged (e.g., observations across individuals). Default \"equal\" ref = \"grandmean\" \"proportional\" ref = \"clustermean\". factors Type summary factors. Can \"reference\" (set reference level), \"mode\" (set common level) \"\" keep levels. fill Logical value relevant ref user's specified reference grid information , covariates provided (e.g., models including age sex covariate age provided reference grid). TRUE, unspecified covariates filled default reference grid. FALSE, users asked provide full reference grid. Currently support default FALSE.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/build.rg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reference Grid for substitution model. — build.rg","text":"reference grid consisting combination covariates brmcoda","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/coef.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Coefficients — coef.brmcoda","title":"Model Coefficients — coef.brmcoda","text":"Extract model coefficients, sum population-level effects corresponding group-level effects brmsfit object brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/coef.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Coefficients — coef.brmcoda","text":"","code":"# S3 method for brmcoda coef(object, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/coef.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Coefficients — coef.brmcoda","text":"object object class brmcoda. ... arguments passed coef.brmsfit.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/coef.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Coefficients — coef.brmcoda","text":"list 3D arrays (one per grouping factor).  summary TRUE,  1st dimension contains factor levels,  2nd dimension contains summary statistics  (see posterior_summary),  3rd dimension contains group-level effects.  summary FALSE, 1st dimension contains  posterior draws, 2nd dimension contains factor levels,  3rd dimension contains group-level effects.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/coef.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Coefficients — coef.brmcoda","text":"","code":"# \\donttest{ ## fit a model if(requireNamespace(\"cmdstanr\")){   m <- brmcoda(complr = complr(data = mcompd, sbp = sbp,                                parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                                idvar = \"ID\", total = 1440),   formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +     wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),   chain = 1, iter = 500,   backend = \"cmdstanr\")      ## extract population and group-level coefficients separately   fixef(m)   ranef(m)      ## extract combined coefficients   coef(m) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":null,"dir":"Reference","previous_headings":"","what":"Indices from a (dataset of) Multilevel Composition(s) (deprecated.) — compilr","title":"Indices from a (dataset of) Multilevel Composition(s) (deprecated.) — compilr","text":"Indices (dataset ) Multilevel Composition(s) (deprecated.)","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indices from a (dataset of) Multilevel Composition(s) (deprecated.) — compilr","text":"","code":"compilr(...)"},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indices from a (dataset of) Multilevel Composition(s) (deprecated.) — compilr","text":"... arguments passed complr.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/compilr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indices from a (dataset of) Multilevel Composition(s) (deprecated.) — compilr","text":"complr object least following elements. comp vector class acomp representing one closed composition matrix class acomp representing multiple closed  compositions one row. between_comp vector class acomp representing one closed -person composition matrix class acomp representing multiple closed -person compositions one row. within_comp vector class acomp representing one closed within-person composition matrix class acomp representing multiple closed within-person compositions one row. logratio Log ratio transform composition. between_logratio Log ratio transform -person composition. within_logratio Log ratio transform within-person composition. data user's dataset imputed dataset input data contains zeros. transform Type transform applied compositional data. parts Names compositional variables. idvar Name variable containing IDs. total Total amount compositions closed.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/complr.html","id":null,"dir":"Reference","previous_headings":"","what":"Indices from a (dataset of) Multilevel Composition(s) — complr","title":"Indices from a (dataset of) Multilevel Composition(s) — complr","text":"Compute sets compositions log ratio transformation multilevel compositional data","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/complr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indices from a (dataset of) Multilevel Composition(s) — complr","text":"","code":"complr(data, parts, sbp = NULL, total = 1, idvar = NULL, transform = \"ilr\")"},{"path":"https://florale.github.io/multilevelcoda/reference/complr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indices from a (dataset of) Multilevel Composition(s) — complr","text":"data data.frame data.table containing data variables used analysis. must include composition ID variable. Required. parts character vector specifying names compositional variables used. sbp signary matrix indicating sequential binary partition. total numeric value total amount compositions closed. Default 1. idvar multilevel data, character string specifying name variable containing IDs. transform character value naming log ratio transformation applied compositional data. Can either \"ilr\" (isometric logratio), \"alr\" (additive logratio), \"clr\" (centered logratio). Default \"ilr\".","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/complr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indices from a (dataset of) Multilevel Composition(s) — complr","text":"complr object least following elements. comp vector class acomp representing one closed composition matrix class acomp representing multiple closed  compositions one row. between_comp vector class acomp representing one closed -person composition matrix class acomp representing multiple closed -person compositions one row. within_comp vector class acomp representing one closed within-person composition matrix class acomp representing multiple closed within-person compositions one row. logratio Log ratio transform composition. between_logratio Log ratio transform -person composition. within_logratio Log ratio transform within-person composition. data user's dataset imputed dataset input data contains zeros. transform Type transform applied compositional data. parts Names compositional variables. idvar Name variable containing IDs. total Total amount compositions closed.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/complr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indices from a (dataset of) Multilevel Composition(s) — complr","text":"ilr-transform maps D-part compositional data simplex non-overlapping subgroups (D-1)-dimension Euclidean space isometrically using orthonormal basis, thereby preserving compositional properties yielding full-rank covariance matrix. ilr transformation preferred. However, alr clr alternatives. alr-transform maps D-part composition Aitchison-simplex non-isometrically (D-1)-dimension Euclidian vectors, commonly treating last part common denominator others. alr transformation rely distance breaks constraint compositional data. clr-transform maps D-part composition Aitchison-simplex isometrically D-dimensional Euclidian vector subspace. clr transformation injetive, resulting singular covariance matrices.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/complr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indices from a (dataset of) Multilevel Composition(s) — complr","text":"","code":"cilr <- complr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                 idvar = \"ID\", total = 1440) str(cilr) #> List of 13 #>  $ comp            : 'acomp' num [1:3540, 1:5] 542.4 458.3 270.8 525 651 99.1 49 41 76 86 297.2 117.1 488.7 259 112 460.3 653.5 624.6 398 436 41 162.1 15 182 155 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ between_comp    : 'acomp' num [1:3540, 1:5] 494.2 494.2 494.2 494.2 494.2 72.3 72.3 72.3 72.3 72.3 249.3 249.3 249.3 249.3 249.3 503.9 503.9 503.9 503.9 503.| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"bTST\" \"bWAKE\" \"bMVPA\" \"bLPA\" ... #>  $ within_comp     : 'acomp' num [1:3540, 1:5] 0.2233 0.1965 0.1234 0.1948 0.2578 0.279 0.1438 0.1277 0.1928 0.233 0.2426 0.0995 0.4416 0.1905 0.0879 0.1859 0.2| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"wTST\" \"wWAKE\" \"wMVPA\" \"wLPA\" ... #>  $ logratio        : 'rmult' num [1:3540, 1:4] 0.291 -0.4759 -0.4983 -0.3126 0.2044 1.2022 1.5804 1.3354 1.3666 1.4313 0.6298 -0.8348 1.3223 -0.0314 -0.6875 1.7| __truncated__ ... #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.3767 0.3183 0.1881 0.3646 0.4521 0.0688 0.0341 0.0285 0.0528 0.0597 0.2064 0.0813 0.3393 0.1799 0.0778 0.3197 0| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>   ..- attr(*, \"V\")= num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"ilr1\" \"ilr2\" \"ilr3\" \"ilr4\" #>  $ between_logratio: 'rmult' num [1:3540, 1:4] -0.29473 -0.29473 -0.29473 -0.29473 -0.29473 1.35958 1.35958 1.35958 1.35958 1.35958 0.00968 0.00968 0.00968 0.00| __truncated__ ... #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.3432 0.3432 0.3432 0.3432 0.3432 0.0502 0.0502 0.0502 0.0502 0.0502 0.1731 0.1731 0.1731 0.1731 0.1731 0.3499 0| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"bTST\" \"bWAKE\" \"bMVPA\" \"bLPA\" ... #>   ..- attr(*, \"V\")= num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"bilr1\" \"bilr2\" \"bilr3\" \"bilr4\" #>  $ within_logratio : 'rmult' num [1:3540, 1:4] 0.58577 -0.18117 -0.20356 -0.01787 0.49911 -0.1574 0.22084 -0.02418 0.00702 0.07172 0.62011 -0.84448 1.31261 -0.0| __truncated__ ... #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.2233 0.1965 0.1234 0.1948 0.2578 0.279 0.1438 0.1277 0.1928 0.233 0.2426 0.0995 0.4416 0.1905 0.0879 0.1859 0.2| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"wTST\" \"wWAKE\" \"wMVPA\" \"wLPA\" ... #>   ..- attr(*, \"V\")= num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"wilr1\" \"wilr2\" \"wilr3\" \"wilr4\" #>  $ data            :Classes ‘data.table’ and 'data.frame':\t3540 obs. of  10 variables: #>   ..$ ID    : num [1:3540] 185 185 185 185 185 185 185 185 185 185 ... #>   ..$ Time  : num [1:3540] 1 2 3 4 5 6 7 8 9 10 ... #>   ..$ Stress: num [1:3540] 4 7 3 2 8 8 6 2 5 0 ... #>   ..$ TST   : num [1:3540] 542 458 271 525 651 431 501 518 458 510 ... #>   ..$ WAKE  : num [1:3540] 99 49 41 76 86 84 29 32 72 143 ... #>   ..$ MVPA  : num [1:3540] 297 117 489 259 112 264 458 111 398 145 ... #>   ..$ LPA   : num [1:3540] 460 653 625 398 436 476 283 670 466 577 ... #>   ..$ SB    : num [1:3540] 41 162 15 182 155 185 169 110 47 64 ... #>   ..$ Age   : num [1:3540] 30 30 30 30 30 30 30 30 30 30 ... #>   ..$ Female: num [1:3540] 0 0 0 0 0 0 0 0 0 0 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>   ..- attr(*, \"index\")= int(0)  #>   .. ..- attr(*, \"__ID\")= int [1:3540] 981 982 983 984 985 986 987 988 989 990 ... #>  $ transform       : chr \"ilr\" #>  $ psi             : num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>   .. ..$ : NULL #>  $ sbp             : num [1:4, 1:5] 1 1 0 0 1 -1 0 0 -1 0 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ parts           : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ idvar           : chr \"ID\" #>  $ total           : num 1440 #>  - attr(*, \"class\")= chr \"complr\"  calr <- complr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                 idvar = \"ID\",                 transform = \"alr\") str(calr) #> List of 13 #>  $ comp            : 'acomp' num [1:3540, 1:5] 0.3767 0.3183 0.1881 0.3646 0.4521 0.0688 0.0341 0.0285 0.0528 0.0597 0.2064 0.0813 0.3393 0.1799 0.0778 0.3197 0| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ between_comp    : 'acomp' num [1:3540, 1:5] 0.3432 0.3432 0.3432 0.3432 0.3432 0.0502 0.0502 0.0502 0.0502 0.0502 0.1731 0.1731 0.1731 0.1731 0.1731 0.3499 0| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"bTST\" \"bWAKE\" \"bMVPA\" \"bLPA\" ... #>  $ within_comp     : 'acomp' num [1:3540, 1:5] 0.2233 0.1965 0.1234 0.1948 0.2578 0.279 0.1438 0.1277 0.1928 0.233 0.2426 0.0995 0.4416 0.1905 0.0879 0.1859 0.2| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"wTST\" \"wWAKE\" \"wMVPA\" \"wLPA\" ... #>  $ logratio        : 'rmult' num [1:3540, 1:4] 2.582 1.039 2.894 1.059 1.435 0.882 -1.196 1.006 -0.873 -0.589 1.98 -0.325 3.484 0.353 -0.325 2.418 1.394 3.73 0.782 1.034 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"alr1\" \"alr2\" \"alr3\" \"alr4\" #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.3767 0.3183 0.1881 0.3646 0.4521 0.0688 0.0341 0.0285 0.0528 0.0597 0.2064 0.0813 0.3393 0.1799 0.0778 0.3197 0| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>   ..- attr(*, \"V\")= num [1:5, 1:4] 0.8 -0.2 -0.2 -0.2 -0.2 ... #>  $ between_logratio: 'rmult' num [1:3540, 1:4] 1.412 1.412 1.412 1.412 1.412 -0.511 -0.511 -0.511 -0.511 -0.511 0.727 0.727 0.727 0.727 0.727 1.431 1.431 1.431 1.431 1.431 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"balr1\" \"balr2\" \"balr3\" \"balr4\" #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.3432 0.3432 0.3432 0.3432 0.3432 0.0502 0.0502 0.0502 0.0502 0.0502 0.1731 0.1731 0.1731 0.1731 0.1731 0.3499 0| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"bTST\" \"bWAKE\" \"bMVPA\" \"bLPA\" ... #>   ..- attr(*, \"V\")= num [1:5, 1:4] 0.8 -0.2 -0.2 -0.2 -0.2 ... #>  $ within_logratio : 'rmult' num [1:3540, 1:4] 1.1698 -0.3726 1.4822 -0.3525 0.0232 1.3924 -0.685 1.5163 -0.3624 -0.0783 1.2527 -1.0529 2.7568 -0.3747 -1.0524 0| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"walr1\" \"walr2\" \"walr3\" \"walr4\" #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.2233 0.1965 0.1234 0.1948 0.2578 0.279 0.1438 0.1277 0.1928 0.233 0.2426 0.0995 0.4416 0.1905 0.0879 0.1859 0.2| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"wTST\" \"wWAKE\" \"wMVPA\" \"wLPA\" ... #>   ..- attr(*, \"V\")= num [1:5, 1:4] 0.8 -0.2 -0.2 -0.2 -0.2 ... #>  $ data            :Classes ‘data.table’ and 'data.frame':\t3540 obs. of  10 variables: #>   ..$ ID    : num [1:3540] 185 185 185 185 185 185 185 185 185 185 ... #>   ..$ Time  : num [1:3540] 1 2 3 4 5 6 7 8 9 10 ... #>   ..$ Stress: num [1:3540] 4 7 3 2 8 8 6 2 5 0 ... #>   ..$ TST   : num [1:3540] 542 458 271 525 651 431 501 518 458 510 ... #>   ..$ WAKE  : num [1:3540] 99 49 41 76 86 84 29 32 72 143 ... #>   ..$ MVPA  : num [1:3540] 297 117 489 259 112 264 458 111 398 145 ... #>   ..$ LPA   : num [1:3540] 460 653 625 398 436 476 283 670 466 577 ... #>   ..$ SB    : num [1:3540] 41 162 15 182 155 185 169 110 47 64 ... #>   ..$ Age   : num [1:3540] 30 30 30 30 30 30 30 30 30 30 ... #>   ..$ Female: num [1:3540] 0 0 0 0 0 0 0 0 0 0 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>   ..- attr(*, \"index\")= int(0)  #>   .. ..- attr(*, \"__ID\")= int [1:3540] 981 982 983 984 985 986 987 988 989 990 ... #>  $ transform       : chr \"alr\" #>  $ psi             : NULL #>  $ sbp             : NULL #>  $ parts           : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ idvar           : chr \"ID\" #>  $ total           : num 1 #>  - attr(*, \"class\")= chr \"complr\"  cclr <- complr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                 idvar = \"ID\",                  transform = \"clr\") str(cclr) #> List of 13 #>  $ comp            : 'acomp' num [1:3540, 1:5] 0.3767 0.3183 0.1881 0.3646 0.4521 0.0688 0.0341 0.0285 0.0528 0.0597 0.2064 0.0813 0.3393 0.1799 0.0778 0.3197 0| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ between_comp    : 'acomp' num [1:3540, 1:5] 0.3432 0.3432 0.3432 0.3432 0.3432 0.0502 0.0502 0.0502 0.0502 0.0502 0.1731 0.1731 0.1731 0.1731 0.1731 0.3499 0| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"bTST\" \"bWAKE\" \"bMVPA\" \"bLPA\" ... #>  $ within_comp     : 'acomp' num [1:3540, 1:5] 0.2233 0.1965 0.1234 0.1948 0.2578 0.279 0.1438 0.1277 0.1928 0.233 0.2426 0.0995 0.4416 0.1905 0.0879 0.1859 0.2| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"wTST\" \"wWAKE\" \"wMVPA\" \"wLPA\" ... #>  $ logratio        : 'rmult' num [1:3540, 1:5] 1.0095 0.8569 0.6713 0.7951 1.124 -0.6907 -1.3782 -1.2172 -1.1376 -0.9001 0.4079 -0.5078 1.2616 0.0885 -0.636 0.8| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"clr1\" \"clr2\" \"clr3\" \"clr4\" ... #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.3767 0.3183 0.1881 0.3646 0.4521 0.0688 0.0341 0.0285 0.0528 0.0597 0.2064 0.0813 0.3393 0.1799 0.0778 0.3197 0| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ between_logratio: 'rmult' num [1:3540, 1:5] 0.8 0.8 0.8 0.8 0.8 -1.123 -1.123 -1.123 -1.123 -1.123 0.116 0.116 0.116 0.116 0.116 0.819 0.819 0.819 0.819 0.81| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"bclr1\" \"bclr2\" \"bclr3\" \"bclr4\" ... #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.3432 0.3432 0.3432 0.3432 0.3432 0.0502 0.0502 0.0502 0.0502 0.0502 0.1731 0.1731 0.1731 0.1731 0.1731 0.3499 0| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"bTST\" \"bWAKE\" \"bMVPA\" \"bLPA\" ... #>  $ within_logratio : 'rmult' num [1:3540, 1:5] 0.20954 0.05692 -0.12859 -0.00483 0.32409 0.43214 -0.25539 -0.0944 -0.01475 0.22266 0.29243 -0.62336 1.14607 -0.0| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"wclr1\" \"wclr2\" \"wclr3\" \"wclr4\" ... #>   ..- attr(*, \"orig\")= 'acomp' num [1:3540, 1:5] 0.2233 0.1965 0.1234 0.1948 0.2578 0.279 0.1438 0.1277 0.1928 0.233 0.2426 0.0995 0.4416 0.1905 0.0879 0.1859 0.2| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"wTST\" \"wWAKE\" \"wMVPA\" \"wLPA\" ... #>  $ data            :Classes ‘data.table’ and 'data.frame':\t3540 obs. of  10 variables: #>   ..$ ID    : num [1:3540] 185 185 185 185 185 185 185 185 185 185 ... #>   ..$ Time  : num [1:3540] 1 2 3 4 5 6 7 8 9 10 ... #>   ..$ Stress: num [1:3540] 4 7 3 2 8 8 6 2 5 0 ... #>   ..$ TST   : num [1:3540] 542 458 271 525 651 431 501 518 458 510 ... #>   ..$ WAKE  : num [1:3540] 99 49 41 76 86 84 29 32 72 143 ... #>   ..$ MVPA  : num [1:3540] 297 117 489 259 112 264 458 111 398 145 ... #>   ..$ LPA   : num [1:3540] 460 653 625 398 436 476 283 670 466 577 ... #>   ..$ SB    : num [1:3540] 41 162 15 182 155 185 169 110 47 64 ... #>   ..$ Age   : num [1:3540] 30 30 30 30 30 30 30 30 30 30 ... #>   ..$ Female: num [1:3540] 0 0 0 0 0 0 0 0 0 0 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>   ..- attr(*, \"index\")= int(0)  #>   .. ..- attr(*, \"__ID\")= int [1:3540] 981 982 983 984 985 986 987 988 989 990 ... #>  $ transform       : chr \"clr\" #>  $ psi             : NULL #>  $ sbp             : NULL #>  $ parts           : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ idvar           : chr \"ID\" #>  $ total           : num 1 #>  - attr(*, \"class\")= chr \"complr\"  cilr_wide <- complr(data = mcompd[!duplicated(ID)], sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\")) str(cilr_wide) #> List of 13 #>  $ comp            : 'acomp' num [1:266, 1:5] 0.3767 0.3569 0.2771 0.4357 0.3678 0.0688 0.0437 0.0826 0.0368 0.05 0.2064 0.0785 0.0229 0.0716 0.0749 0.3197 0.3| __truncated__ ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ between_comp    : NULL #>  $ within_comp     : NULL #>  $ logratio        : 'rmult' num [1:266, 1:4] 0.291 -0.339 0.211 -0.218 -0.232 1.202 1.484 0.855 1.747 1.412 0.63 -0.949 -2.076 -0.943 -0.985 1.71 0.386 0.484 0.108 0.228 ... #>   ..- attr(*, \"orig\")= 'acomp' num [1:266, 1:5] 0.3767 0.3569 0.2771 0.4357 0.3678 0.0688 0.0437 0.0826 0.0368 0.05 0.2064 0.0785 0.0229 0.0716 0.0749 0.3197 0.3| __truncated__ ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>   ..- attr(*, \"V\")= num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:4] \"ilr1\" \"ilr2\" \"ilr3\" \"ilr4\" #>  $ between_logratio: NULL #>  $ within_logratio : NULL #>  $ data            :Classes ‘data.table’ and 'data.frame':\t266 obs. of  10 variables: #>   ..$ ID    : num [1:266] 185 186 187 188 189 190 191 192 193 194 ... #>   ..$ Time  : num [1:266] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ Stress: num [1:266] 4 3 4 0 0 2 4 4 0 2 ... #>   ..$ TST   : num [1:266] 542 514 399 627 530 345 415 471 350 267 ... #>   ..$ WAKE  : num [1:266] 99 63 119 53 72 204 37 179 56 50 ... #>   ..$ MVPA  : num [1:266] 297 113 33 103 108 244 88 84 25 113 ... #>   ..$ LPA   : num [1:266] 460 475 591 353 424 516 781 477 657 699 ... #>   ..$ SB    : num [1:266] 41 275 298 303 307 131 119 229 351 311 ... #>   ..$ Age   : num [1:266] 30 20 22 27 22 25 21 20 20 32 ... #>   ..$ Female: num [1:266] 0 0 0 0 0 0 0 0 0 0 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ transform       : chr \"ilr\" #>  $ psi             : num [1:5, 1:4] 0.548 0.548 -0.365 -0.365 -0.365 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>   .. ..$ : NULL #>  $ sbp             : num [1:4, 1:5] 1 1 0 0 1 -1 0 0 -1 0 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ parts           : chr [1:5] \"TST\" \"WAKE\" \"MVPA\" \"LPA\" ... #>  $ idvar           : NULL #>  $ total           : num 1 #>  - attr(*, \"class\")= chr \"complr\""},{"path":"https://florale.github.io/multilevelcoda/reference/create_substitution.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor function for substitution class. — create_substitution","title":"Constructor function for substitution class. — create_substitution","text":"Constructor function substitution class.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/create_substitution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor function for substitution class. — create_substitution","text":"","code":"create_substitution(   between_simple_sub,   within_simple_sub,   simple_sub,   between_avg_sub,   within_avg_sub,   avg_sub,   delta,   ref,   level,   weight,   parts,   summary )"},{"path":"https://florale.github.io/multilevelcoda/reference/create_substitution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor function for substitution class. — create_substitution","text":"between_simple_sub list results bsub NULL within_simple_sub list results wsub NULL simple_sub list results sub NULL between_avg_sub list results bsubmargins NULL within_avg_sub list results wsubmargins NULL avg_sub list results submargins NULL delta numeric vector amount substitution ref character value specifying reference grid level character value specifying level substitution weight weight use calculation reference composition parts parts composition summary logical value specifying whether summarize results","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/create_substitution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor function for substitution class. — create_substitution","text":"object class substitution","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/diagnostic-quantities-brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Diagnostic Quantities from brmsfit Models in brmcoda — diagnostic-quantities-brmcoda","title":"Extract Diagnostic Quantities from brmsfit Models in brmcoda — diagnostic-quantities-brmcoda","text":"Extract Diagnostic Quantities brmsfit Models brmcoda","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/diagnostic-quantities-brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Diagnostic Quantities from brmsfit Models in brmcoda — diagnostic-quantities-brmcoda","text":"","code":"# S3 method for brmcoda log_posterior(object, ...)  # S3 method for brmcoda nuts_params(object, ...)  # S3 method for brmcoda rhat(x, ...)  # S3 method for brmcoda neff_ratio(object, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/diagnostic-quantities-brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Diagnostic Quantities from brmsfit Models in brmcoda — diagnostic-quantities-brmcoda","text":"... Arguments passed individual methods (applicable). x, object brmcoda object another R object methods defined.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/diagnostic-quantities-brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Diagnostic Quantities from brmsfit Models in brmcoda — diagnostic-quantities-brmcoda","text":"exact form output depends method.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/draws-index-brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Index brmcoda objects — draws-index-brmcoda","title":"Index brmcoda objects — draws-index-brmcoda","text":"Index brmcoda objects","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/draws-index-brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index brmcoda objects — draws-index-brmcoda","text":"","code":"# S3 method for brmcoda variables(x, ...)  # S3 method for brmcoda nvariables(x, ...)  # S3 method for brmcoda niterations(x)  # S3 method for brmcoda nchains(x)  # S3 method for brmcoda ndraws(x)"},{"path":"https://florale.github.io/multilevelcoda/reference/draws-index-brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index brmcoda objects — draws-index-brmcoda","text":"x object class brmcoda. ... Arguments passed individual methods.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/fitted.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected Values of the Posterior Predictive Distribution — fitted.brmcoda","title":"Expected Values of the Posterior Predictive Distribution — fitted.brmcoda","text":"Compute posterior draws expected value posterior predictive distribution brmsfit model brmcoda object. Can performed data used fit model (posterior predictive checks) new data. definition, predictions smaller variance posterior predictions performed predict.brmcoda method. uncertainty expected value posterior predictive distribution incorporated draws computed fitted residual error ignored . However, estimated means methods averaged across draws similar.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/fitted.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected Values of the Posterior Predictive Distribution — fitted.brmcoda","text":"","code":"# S3 method for brmcoda fitted(object, scale = c(\"linear\", \"response\"), summary = TRUE, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/fitted.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected Values of the Posterior Predictive Distribution — fitted.brmcoda","text":"object object class brmcoda. scale Specifically models compositional responses, either \"response\" \"linear\". \"linear\", results returned log-ratio scale. \"response\", results returned compositional scale response variable. summary summary statistics returned instead raw values? Default TRUE. ... arguments passed fitted.brmsfit control additional aspects prediction.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/fitted.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected Values of the Posterior Predictive Distribution — fitted.brmcoda","text":"array predicted mean response values.   summary = FALSE output resembles  posterior_epred.brmsfit. summary = TRUE output depends family: categorical   ordinal families, output N x E x C array, N   number observations, E number summary statistics, C   number categories. families, output N x E   matrix. number summary statistics E equal 2 +   length(probs): Estimate column contains point estimates (either   mean median depending argument robust),  Est.Error column contains uncertainty estimates (either standard   deviation median absolute deviation depending argument  robust). remaining columns starting Q contain   quantile estimates specified via argument probs. multivariate models, additional dimension added output   indexes along different response variables.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/fitted.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected Values of the Posterior Predictive Distribution — fitted.brmcoda","text":"","code":"# \\donttest{ ## fit a model if(requireNamespace(\"cmdstanr\")){   ## compute composition and ilr coordinates   cilr <- complr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                  idvar = \"ID\", total = 1440)      ## fit a model   m1 <- brmcoda(complr = cilr,                 formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                   wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),                 chain = 1, iter = 500,                 backend = \"cmdstanr\")      ## compute expected predictions   epred <- fitted(m1)   head(epred)      ## fit a model with compositional outcome   m2 <- brmcoda(complr = cilr,                 formula = mvbind(ilr1, ilr2, ilr3, ilr4) ~ Stress + Female + (1 | ID),                 chain = 1, iter = 500,                 backend = \"cmdstanr\")      ## expected predictions on compositional scale   epredcomp <- fitted(m2, scale = \"response\")   head(epredcomp) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/fixef.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Population-Level Estimates — fixef.brmcoda","title":"Population-Level Estimates — fixef.brmcoda","text":"Extract population-level ('fixed') effects brmsfit object brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/fixef.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population-Level Estimates — fixef.brmcoda","text":"","code":"# S3 method for brmcoda fixef(object, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/fixef.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Population-Level Estimates — fixef.brmcoda","text":"object object class brmcoda. ... arguments passed fixef.brmsfit.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/fixef.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Population-Level Estimates — fixef.brmcoda","text":"summary TRUE, matrix returned   posterior_summary population-level effects.   summary FALSE, matrix one row per   posterior draw one column per population-level effect.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/fixef.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Population-Level Estimates — fixef.brmcoda","text":"","code":"# \\donttest{ ## fit a model if(requireNamespace(\"cmdstanr\")){   ## fit a model   m <- brmcoda(complr = complr(data = mcompd, sbp = sbp,                                parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                                idvar = \"ID\", total = 1440),   formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +     wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),   chain = 1, iter = 500,   backend = \"cmdstanr\")      ## extract population-Level coefficients   fixef(m) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/get-substitution.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions used only internally to estimate substitution model — get-substitution","title":"Helper functions used only internally to estimate substitution model — get-substitution","text":"Helper functions used internally estimate substitution model","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/is.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is a brmcoda object — is.brmcoda","title":"Checks if argument is a brmcoda object — is.brmcoda","text":"Checks argument brmcoda object","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/is.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is a brmcoda object — is.brmcoda","text":"","code":"is.brmcoda(x)"},{"path":"https://florale.github.io/multilevelcoda/reference/is.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is a brmcoda object — is.brmcoda","text":"x object class brmcoda.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/is.complr.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is a complr object — is.complr","title":"Checks if argument is a complr object — is.complr","text":"Checks argument complr object","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/is.complr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is a complr object — is.complr","text":"","code":"is.complr(x)"},{"path":"https://florale.github.io/multilevelcoda/reference/is.complr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is a complr object — is.complr","text":"x object class complr.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/is.substitution.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is a substitution object — is.substitution","title":"Checks if argument is a substitution object — is.substitution","text":"Checks argument substitution object","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/is.substitution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is a substitution object — is.substitution","text":"","code":"is.substitution(x)"},{"path":"https://florale.github.io/multilevelcoda/reference/is.substitution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is a substitution object — is.substitution","text":"x object class substitution.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/launch_shinystan.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to shinystan — launch_shinystan.brmcoda","title":"Interface to shinystan — launch_shinystan.brmcoda","text":"Provide interface shinystan models fitted brms","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/launch_shinystan.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface to shinystan — launch_shinystan.brmcoda","text":"","code":"# S3 method for brmcoda launch_shinystan(object, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/launch_shinystan.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface to shinystan — launch_shinystan.brmcoda","text":"object fitted model object class brmcoda. ... Optional arguments pass launch_shinystan runApp.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/launch_shinystan.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface to shinystan — launch_shinystan.brmcoda","text":"S4 shinystan object","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/loo.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficient approximate leave-one-out cross-validation (LOO) — loo.brmcoda","title":"Efficient approximate leave-one-out cross-validation (LOO) — loo.brmcoda","text":"Perform approximate leave-one-cross-validation based posterior likelihood using loo package. details see loo.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/loo.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficient approximate leave-one-out cross-validation (LOO) — loo.brmcoda","text":"","code":"# S3 method for brmcoda loo(x, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/loo.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficient approximate leave-one-out cross-validation (LOO) — loo.brmcoda","text":"x brmcoda object. ... brmsfit objects arguments passed underlying post-processing functions. particular, see prepare_predictions supported arguments.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/loo.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficient approximate leave-one-out cross-validation (LOO) — loo.brmcoda","text":"just one object provided, object class loo.  multiple objects provided, object class loolist.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/mcmc_plot.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC Plots Implemented in bayesplot — mcmc_plot.brmcoda","title":"MCMC Plots Implemented in bayesplot — mcmc_plot.brmcoda","text":"Call MCMC plotting functions implemented bayesplot package.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/mcmc_plot.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC Plots Implemented in bayesplot — mcmc_plot.brmcoda","text":"","code":"# S3 method for brmcoda mcmc_plot(object, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/mcmc_plot.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC Plots Implemented in bayesplot — mcmc_plot.brmcoda","text":"object brmcoda class object. ... arguments passed mcmc_plot.brmsfit.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/mcmc_plot.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC Plots Implemented in bayesplot — mcmc_plot.brmcoda","text":"ggplot object   can customized using ggplot2 package.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/mcmc_plot.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC Plots Implemented in bayesplot — mcmc_plot.brmcoda","text":"","code":"if (FALSE) { cilr <- complr(data = mcompd, sbp = sbp,         parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  # model with compositional predictor at between and within-person levels fit <- brmcoda(complr = cilr,                formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                                  wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),                chain = 1, iter = 500) mcmc_plot(fit) }"},{"path":"https://florale.github.io/multilevelcoda/reference/mcompd.html","id":null,"dir":"Reference","previous_headings":"","what":"Multilevel Compositional Data — mcompd","title":"Multilevel Compositional Data — mcompd","text":"simulated dataset containing multiple days compositional data.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/mcompd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multilevel Compositional Data — mcompd","text":"","code":"mcompd"},{"path":"https://florale.github.io/multilevelcoda/reference/mcompd.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Multilevel Compositional Data — mcompd","text":"data table containing 10 variables. ID unique identifier individual Time Recurrence time repeated measures individual Stress Self report stress measures 0 10 scale --- repeated measure TST Total Sleep Time (minutes) --- repeated measure WAKE Wake time bed, trying sleep (minutes) --- repeated measure MVPA Moderate Vigorous Physical Activity (minutes) --- repeated measure LPA Light Physical Activity (minutes) --- repeated measure SB Sedentary Behavior (minutes) --- repeated measure Age Age years --- baseline measure Female Binary: whether participants identified female (1) (0) --- baseline measure ","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/mean.complr.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean amounts and mean compositions presented in a complr object. — mean.complr","title":"Mean amounts and mean compositions presented in a complr object. — mean.complr","text":"Mean amounts mean compositions presented complr object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/mean.complr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean amounts and mean compositions presented in a complr object. — mean.complr","text":"","code":"# S3 method for complr mean(x, weight = c(\"equal\", \"proportional\"), ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/mean.complr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean amounts and mean compositions presented in a complr object. — mean.complr","text":"x object class complr. weight character value specifying weight use calculation reference composition. \"equal\", give equal weight units (e.g., individuals). \"proportional\", weights proportion frequencies units averaged (e.g., observations across individuals) Default equal. ... generic argument, use.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/mean.complr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean amounts and mean compositions presented in a complr object. — mean.complr","text":"","code":"cilr <- complr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                  idvar = \"ID\") mean(cilr) #> $mean_comp #>                    TST       WAKE       MVPA       LPA        SB #> comp         0.3256777 0.03941706 0.08364547 0.3785304 0.1727294 #> between_comp 0.3109103 0.04219850 0.09859328 0.3816460 0.1666520 #> within_comp  0.2145624 0.19638789 0.17412177 0.2065891 0.2083389 #>  #> $mean_lr #>                    TST       WAKE       MVPA       LPA        SB #> comp         0.3256777 0.03941706 0.08364547 0.3785304 0.1727294 #> between_comp 0.3109103 0.04219850 0.09859328 0.3816460 0.1666520 #> within_comp  0.2145624 0.19638789 0.17412177 0.2065891 0.2083389 #>"},{"path":"https://florale.github.io/multilevelcoda/reference/model.frame.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting the Model Frame from a Formula or Fit from brmcoda object — model.frame.brmcoda","title":"Extracting the Model Frame from a Formula or Fit from brmcoda object — model.frame.brmcoda","text":"Extracting Model Frame Formula Fit brmcoda object","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/model.frame.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting the Model Frame from a Formula or Fit from brmcoda object — model.frame.brmcoda","text":"","code":"# S3 method for brmcoda model.frame(formula, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/model.frame.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting the Model Frame from a Formula or Fit from brmcoda object — model.frame.brmcoda","text":"formula brmcoda object. ... arguments passed methods.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/multilevelcoda_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"multilevelcoda Simulation Study Results — multilevelcoda_sim","title":"multilevelcoda Simulation Study Results — multilevelcoda_sim","text":"Provide full results simulation study testing performance multilevelcoda","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/multilevelcoda_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multilevelcoda Simulation Study Results — multilevelcoda_sim","text":"","code":"multilevelcoda_sim()"},{"path":"https://florale.github.io/multilevelcoda/reference/multilevelcoda_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multilevelcoda Simulation Study Results — multilevelcoda_sim","text":"S4 shiny object","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/nobs.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Number of Observations from brmcoda object — nobs.brmcoda","title":"Extract Number of Observations from brmcoda object — nobs.brmcoda","text":"Extract Number Observations brmcoda object","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/nobs.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Number of Observations from brmcoda object — nobs.brmcoda","text":"","code":"# S3 method for brmcoda nobs(object, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/nobs.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Number of Observations from brmcoda object — nobs.brmcoda","text":"object brmcoda object. ... arguments passed methods.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/pairs.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a matrix of output plots from a brmcoda's brmsfit object — pairs.brmcoda","title":"Create a matrix of output plots from a brmcoda's brmsfit object — pairs.brmcoda","text":"pairs method customized MCMC output.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/pairs.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a matrix of output plots from a brmcoda's brmsfit object — pairs.brmcoda","text":"","code":"# S3 method for brmcoda pairs(x, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/pairs.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a matrix of output plots from a brmcoda's brmsfit object — pairs.brmcoda","text":"x brmcoda class object. ... arguments passed pairs.brmsfit.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/pairs.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a matrix of output plots from a brmcoda's brmsfit object — pairs.brmcoda","text":"","code":"if (FALSE) { cilr <- complr(data = mcompd, sbp = sbp,         parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  # model with compositional predictor at between and within-person levels fit <- brmcoda(complr = cilr,                formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                                  wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),                chain = 1, iter = 500) pairs(fit) }"},{"path":"https://florale.github.io/multilevelcoda/reference/plot.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace and Density Plots for MCMC Draws plot — plot.brmcoda","title":"Trace and Density Plots for MCMC Draws plot — plot.brmcoda","text":"Make plot brmcoda model results.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/plot.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace and Density Plots for MCMC Draws plot — plot.brmcoda","text":"","code":"# S3 method for brmcoda plot(x, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/plot.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace and Density Plots for MCMC Draws plot — plot.brmcoda","text":"x brmcoda class object. ... arguments passed plot.brmsfit.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/plot.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace and Density Plots for MCMC Draws plot — plot.brmcoda","text":"invisible list  gtable objects.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/plot.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trace and Density Plots for MCMC Draws plot — plot.brmcoda","text":"","code":"if (FALSE) { cilr <- complr(data = mcompd, sbp = sbp,         parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  # model with compositional predictor at between and within-person levels fit <- brmcoda(complr = cilr,                formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                                  wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),                chain = 1, iter = 500) plot(fit) }"},{"path":"https://florale.github.io/multilevelcoda/reference/plot.substitution.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitution Plot — plot.substitution","title":"Substitution Plot — plot.substitution","text":"Make plot substitution model results.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/plot.substitution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitution Plot — plot.substitution","text":"","code":"# S3 method for substitution plot(x, to, ref, level, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/plot.substitution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitution Plot — plot.substitution","text":"x substitution class object. character value vector specifying names compositional parts reallocated model. ref character value ((\"grandmean\" \"clustermean\" \"users\"), level character value (\"\", \"within\"), \"aggregate\"). ... components plot, followed plus sign (+).","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/plot.substitution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitution Plot — plot.substitution","text":"ggplot graph object showing estimated difference outcome pair compositional variables substituted specific time.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/pp_check.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Predictive Checks for brmcoda Objects — pp_check.brmcoda","title":"Posterior Predictive Checks for brmcoda Objects — pp_check.brmcoda","text":"Perform posterior predictive checks help bayesplot package.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/pp_check.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Predictive Checks for brmcoda Objects — pp_check.brmcoda","text":"","code":"# S3 method for brmcoda pp_check(object, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/pp_check.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Predictive Checks for brmcoda Objects — pp_check.brmcoda","text":"object object class brmcoda. ... arguments passed predict.brmsfit well PPC function specified type.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/predict.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws from the Posterior Predictive Distribution — predict.brmcoda","title":"Draws from the Posterior Predictive Distribution — predict.brmcoda","text":"Compute posterior draws posterior predictive distribution brmsfit model brmcoda object. Can performed data used fit model (posterior predictive checks) new data. definition, draws higher variance draws expected value posterior predictive distribution computed fitted.brmcoda. residual error incorporated posterior_predict. However, estimated means methods averaged across draws similar.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/predict.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws from the Posterior Predictive Distribution — predict.brmcoda","text":"","code":"# S3 method for brmcoda predict(object, scale = c(\"linear\", \"response\"), summary = TRUE, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/predict.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws from the Posterior Predictive Distribution — predict.brmcoda","text":"object object class brmcoda. scale Specifically models compositional responses, either \"response\" \"linear\". \"linear\", results returned log-ratio scale. \"response\", results returned compositional scale response variable. summary summary statistics returned instead raw values? Default TRUE. ... arguments passed predict.brmsfit control additional aspects prediction.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/predict.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws from the Posterior Predictive Distribution — predict.brmcoda","text":"array predicted response values.   summary = FALSE output resembles  posterior_predict.brmsfit. summary = TRUE output depends family: categorical   ordinal families, output N x C matrix, N number   observations, C number categories, values   predicted category probabilities. families, output N   x E matrix E = 2 + length(probs) number summary   statistics: Estimate column contains point estimates (either   mean median depending argument robust),  Est.Error column contains uncertainty estimates (either standard   deviation median absolute deviation depending argument  robust). remaining columns starting Q contain   quantile estimates specified via argument probs.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/predict.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draws from the Posterior Predictive Distribution — predict.brmcoda","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){   ## fit a model   cilr <- complr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                  idvar = \"ID\", total = 1440)      m1 <- brmcoda(complr = cilr,                 formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                   wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),                 chain = 1, iter = 500,                 backend = \"cmdstanr\")      ## predicted responses   pred <- predict(m1)   head(pred)      ## fit a model with compositional outcome   m2 <- brmcoda(complr = cilr,                 formula = mvbind(ilr1, ilr2, ilr3, ilr4) ~ Stress + Female + (1 | ID),                 chain = 1, iter = 500,                 backend = \"cmdstanr\")      ## predicted responses on compositional scale   predcomp <- predict(m2, scale = \"linear\")   head(predcomp) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/print.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a Summary for a fitted brmsfit model in a brmcoda object — print.brmcoda","title":"Print a Summary for a fitted brmsfit model in a brmcoda object — print.brmcoda","text":"Print Summary fitted brmsfit model brmcoda object","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/print.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a Summary for a fitted brmsfit model in a brmcoda object — print.brmcoda","text":"","code":"# S3 method for brmcoda print(x, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/print.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a Summary for a fitted brmsfit model in a brmcoda object — print.brmcoda","text":"x object class brmcoda. ... arguments passed summary.brmcoda.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/print.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a Summary for a fitted brmsfit model in a brmcoda object — print.brmcoda","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){   m <- brmcoda(complr = complr(data = mcompd, sbp = sbp,                                parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                                idvar = \"ID\", total = 1440),   formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +     wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),   chain = 1, iter = 500,   backend = \"cmdstanr\")     print(m) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/print.complr.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a Summary for a complr object — print.complr","title":"Print a Summary for a complr object — print.complr","text":"Print Summary complr object","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/print.complr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a Summary for a complr object — print.complr","text":"","code":"# S3 method for complr print(x, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/print.complr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a Summary for a complr object — print.complr","text":"x object class complr. ... arguments passed summary.complr.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/print.complr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a Summary for a complr object — print.complr","text":"","code":"cilr <- complr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                  idvar = \"ID\") print(cilr) #>                                               #> composition_parts    TST, WAKE, MVPA, LPA, SB #> logratios              ilr1, ilr2, ilr3, ilr4 #> idvar                                    NULL #> nobs                                     3540 #> ngrps                                     266 #> transform_type                            ilr #> total                                       1 #> composition_geometry                    acomp #> logratio_class                          rmult"},{"path":"https://florale.github.io/multilevelcoda/reference/print.substitution.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a Summary for a substitution object — print.substitution","title":"Print a Summary for a substitution object — print.substitution","text":"Print Summary substitution object","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/print.substitution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a Summary for a substitution object — print.substitution","text":"","code":"# S3 method for substitution print(x, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/print.substitution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a Summary for a substitution object — print.substitution","text":"x substitution object. ... Additional arguments passed method summary substitution.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/print.substitution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a Summary for a substitution object — print.substitution","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){   ## fit a model with compositional predictor at between and between-person levels   m <- brmcoda(complr = complr(data = mcompd, sbp = sbp,                                parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                                idvar = \"ID\", total = 1440),   formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +     wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),   chain = 1, iter = 500,   backend = \"cmdstanr\")      subm <- substitution(object = m, delta = 5)   print(subm) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/print.summary.complr.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for a complr object — print.summary.complr","title":"Summary for a complr object — print.summary.complr","text":"Summary complr object","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/print.summary.complr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for a complr object — print.summary.complr","text":"","code":"# S3 method for summary.complr print(x, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/print.summary.complr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for a complr object — print.summary.complr","text":"x object class summary.complr. ... arguments passed summary.complr.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/print.summary.complr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for a complr object — print.summary.complr","text":"","code":"cilr <- complr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                  idvar = \"ID\") print(cilr) #>                                               #> composition_parts    TST, WAKE, MVPA, LPA, SB #> logratios              ilr1, ilr2, ilr3, ilr4 #> idvar                                    NULL #> nobs                                     3540 #> ngrps                                     266 #> transform_type                            ilr #> total                                       1 #> composition_geometry                    acomp #> logratio_class                          rmult"},{"path":"https://florale.github.io/multilevelcoda/reference/prior_summary.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Priors of a brmsfit from a brmcoda object — prior_summary.brmcoda","title":"Extract Priors of a brmsfit from a brmcoda object — prior_summary.brmcoda","text":"Compute Bayes factors marginal likelihoods","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/prior_summary.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Priors of a brmsfit from a brmcoda object — prior_summary.brmcoda","text":"","code":"# S3 method for brmcoda prior_summary(object, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/prior_summary.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Priors of a brmsfit from a brmcoda object — prior_summary.brmcoda","text":"object object class brmcoda. ... arguments passed methods.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/psub.html","id":null,"dir":"Reference","previous_headings":"","what":"Possible Pairwise Substitutions — psub","title":"Possible Pairwise Substitutions — psub","text":"dataset containing possible pairwise subsitutions.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/psub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Possible Pairwise Substitutions — psub","text":"","code":"psub"},{"path":"https://florale.github.io/multilevelcoda/reference/psub.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Possible Pairwise Substitutions — psub","text":"data table containing 5 variables. TST first compositional variable WAKE second compositional variable MVPA third compositional variable LPA fourth compositional variable SB fifth compositional variable","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/ranef.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Group-Level Estimates — ranef.brmcoda","title":"Group-Level Estimates — ranef.brmcoda","text":"Extract group-level ('random') effects level brmsfit object brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/ranef.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group-Level Estimates — ranef.brmcoda","text":"","code":"# S3 method for brmcoda ranef(object, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/ranef.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group-Level Estimates — ranef.brmcoda","text":"object object class brmcoda. ... arguments passed ranef.brmsfit.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/ranef.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group-Level Estimates — ranef.brmcoda","text":"list 3D arrays (one per grouping factor).  summary TRUE,  1st dimension contains factor levels,  2nd dimension contains summary statistics  (see posterior_summary),  3rd dimension contains group-level effects.  summary FALSE, 1st dimension contains  posterior draws, 2nd dimension contains factor levels,  3rd dimension contains group-level effects.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/ranef.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group-Level Estimates — ranef.brmcoda","text":"","code":"# \\donttest{ ## fit a model if(requireNamespace(\"cmdstanr\")){   m <- brmcoda(complr = complr(data = mcompd, sbp = sbp,                                parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                                idvar = \"ID\", total = 1440),   formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +     wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),   chain = 1, iter = 500,   backend = \"cmdstanr\")      ## extract group-level coefficients   ranef(m) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/residuals.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Draws of Residuals/Predictive Errors — residuals.brmcoda","title":"Posterior Draws of Residuals/Predictive Errors — residuals.brmcoda","text":"Compute posterior draws residuals/predictive errors","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/residuals.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Draws of Residuals/Predictive Errors — residuals.brmcoda","text":"","code":"# S3 method for brmcoda residuals(object, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/residuals.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Draws of Residuals/Predictive Errors — residuals.brmcoda","text":"object object class brmcoda. ... arguments passed residuals.brmsfit.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/residuals.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior Draws of Residuals/Predictive Errors — residuals.brmcoda","text":"array predictive error/residual draws.  summary = FALSE output resembles  predictive_error.brmsfit. summary = TRUE output   N x E matrix, N number observations E denotes   summary statistics computed draws.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/residuals.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior Draws of Residuals/Predictive Errors — residuals.brmcoda","text":"","code":"# \\donttest{ ## fit a model if(requireNamespace(\"cmdstanr\")){   m <- brmcoda(complr = complr(data = mcompd, sbp = sbp,                                parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                                idvar = \"ID\", total = 1440),   formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +     wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),   chain = 1, iter = 500,   backend = \"cmdstanr\")      ## extract residuals   res <- residuals(m)   head(res) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/sbp.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential Binary Partition — sbp","title":"Sequential Binary Partition — sbp","text":"matrix sequential binary partition.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/sbp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential Binary Partition — sbp","text":"","code":"sbp"},{"path":"https://florale.github.io/multilevelcoda/reference/sbp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sequential Binary Partition — sbp","text":"matrix 5 columns 4 rows. TST first compositional variable WAKE second compositional variable MVPA third compositional variable LPA fourth compositional variable SB fifth compositional variable","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"multilevelcoda Simulation Study results — sim","title":"multilevelcoda Simulation Study results — sim","text":"list 4 components","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multilevelcoda Simulation Study results — sim","text":"","code":"sim"},{"path":"https://florale.github.io/multilevelcoda/reference/sim.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"multilevelcoda Simulation Study results — sim","text":"list 5 columns 4 rows. brmcoda_tab Simulation results brmcoda() tables sub_tab Simulation results substitution() tables brmcoda_plot Simulation results brmcoda() graphs sub_plot Simulation results substitution() graphs","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/sub.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Substitution — sub","title":"Simple Substitution — sub","text":"function alias substitution estimates difference outcome compositional parts substituted specific unit(s) using aggregate reference composition (e.g., compositional mean sample level, seperated - within effects). recommended users run substitution model using substitution function.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/sub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Substitution — sub","text":"","code":"sub(   object,   delta,   basesub,   summary = TRUE,   ref = \"grandmean\",   level = \"aggregate\",   weight = \"equal\",   scale = c(\"response\", \"linear\"),   cores = NULL,   ... )"},{"path":"https://florale.github.io/multilevelcoda/reference/sub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Substitution — sub","text":"object fitted brmcoda object. delta integer, numeric value vector indicating amount substituted change compositional parts. basesub data.frame data.table base possible substitution compositional parts. data set can computed using function basesub. NULL, possible pairwise substitution compositional parts used. summary logical value. estimate level reference grid (FALSE) average (TRUE) returned? Default TRUE. applicable model covariates addition isometric log-ratio coordinates (.e., adjusted model). ref Either character value vector dataset. Can \"grandmean\" /\"clustermean\", data.frame data.table user's specified reference grid consisting combinations covariates predictions made. User's specified reference grid possible simple substitution. Single level models default \"grandmean\". level character string vector. estimate multilevel models focus \"\" /\"within\" \"aggregate\" variance? Single-level models default \"aggregate\". weight character value specifying weight use calculation reference composition. \"equal\", give equal weight units (e.g., individuals). \"proportional\", weights proportion frequencies units averaged (e.g., observations across individuals). Default \"equal\" ref = \"grandmean\" \"proportional\" ref = \"clustermean\". scale Either \"response\" \"linear\". \"response\", results returned scale response variable. \"linear\", results returned scale linear predictor term, without applying inverse link function transformations. cores Number cores use executing chains parallel, recommend setting mc.cores option many processors hardware RAM allow (number compositional parts). non-Windows OS non-interactive R sessions, forking used instead PSOCK clusters. ... currently ignored.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/sub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Substitution — sub","text":"list containing results multilevel compositional substitution model. first six lists contain results substitution estimation compositional part. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. Reference Either grandmean, clustermean, users.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/sub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Substitution — sub","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){  cilr <- complr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\", total = 1440)  # model with compositional predictor at between and within-person levels m <- brmcoda(complr = cilr,               formula = Stress ~ ilr1 + ilr2 + ilr3 + ilr4 + (1 | ID),               chain = 1, iter = 500,              backend = \"cmdstanr\")               subm <- sub(object = m, basesub = psub, delta = 5) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/submargins.html","id":null,"dir":"Reference","previous_headings":"","what":"Average Substitution — submargins","title":"Average Substitution — submargins","text":"function alias substitution estimates difference outcome compositional parts substituted specific unit(s) using cluster mean (e.g., compositional mean individual level) reference composition. recommended users run substitution model using substitution function.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/submargins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average Substitution — submargins","text":"","code":"submargins(   object,   delta,   basesub,   ref = \"clustermean\",   level = \"aggregate\",   weight = \"proportional\",   scale = c(\"response\", \"linear\"),   cores = NULL,   ... )"},{"path":"https://florale.github.io/multilevelcoda/reference/submargins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average Substitution — submargins","text":"object fitted brmcoda object. delta integer, numeric value vector indicating amount substituted change compositional parts. basesub data.frame data.table base possible substitution compositional parts. data set can computed using function basesub. NULL, possible pairwise substitution compositional parts used. ref Either character value vector dataset. Can \"grandmean\" /\"clustermean\", data.frame data.table user's specified reference grid consisting combinations covariates predictions made. User's specified reference grid possible simple substitution. Single level models default \"grandmean\". level character string vector. estimate multilevel models focus \"\" /\"within\" \"aggregate\" variance? Single-level models default \"aggregate\". weight character value specifying weight use calculation reference composition. \"equal\", give equal weight units (e.g., individuals). \"proportional\", weights proportion frequencies units averaged (e.g., observations across individuals). Default \"equal\" ref = \"grandmean\" \"proportional\" ref = \"clustermean\". scale Either \"response\" \"linear\". \"response\", results returned scale response variable. \"linear\", results returned scale linear predictor term, without applying inverse link function transformations. cores Number cores use executing chains parallel, recommend setting mc.cores option many processors hardware RAM allow (number compositional parts). non-Windows OS non-interactive R sessions, forking used instead PSOCK clusters. ... currently ignored.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/submargins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average Substitution — submargins","text":"list containing results multilevel compositional substitution model. first six lists contain results substitution estimation compositional part. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. Reference Either grandmean, clustermean, users.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/submargins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Average Substitution — submargins","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){  cilr <- complr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\", total = 1440)  # model with compositional predictor at between and within-person levels m <- brmcoda(complr = cilr,               formula = Stress ~ ilr1 + ilr2 + ilr3 + ilr4 + (1 | ID),               chain = 1, iter = 500,              backend = \"cmdstanr\")                       subm <- submargins(object = m, basesub = psub, delta = 5) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/substitution.html","id":null,"dir":"Reference","previous_headings":"","what":"Multilevel Compositional Substitution Analysis — substitution","title":"Multilevel Compositional Substitution Analysis — substitution","text":"Estimate difference outcome compositional parts substituted specific unit(s). substitution output encapsulates substitution results compositional parts present brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/substitution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multilevel Compositional Substitution Analysis — substitution","text":"","code":"substitution(   object,   delta,   basesub = NULL,   summary = TRUE,   ref = c(\"grandmean\", \"clustermean\"),   level = c(\"between\", \"within\", \"aggregate\"),   weight = c(\"equal\", \"proportional\"),   scale = c(\"response\", \"linear\"),   cores = NULL,   ... )"},{"path":"https://florale.github.io/multilevelcoda/reference/substitution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multilevel Compositional Substitution Analysis — substitution","text":"object fitted brmcoda object. delta integer, numeric value vector indicating amount substituted change compositional parts. basesub data.frame data.table base possible substitution compositional parts. data set can computed using function basesub. NULL, possible pairwise substitution compositional parts used. summary logical value. estimate level reference grid (FALSE) average (TRUE) returned? Default TRUE. applicable model covariates addition isometric log-ratio coordinates (.e., adjusted model). ref Either character value vector dataset. Can \"grandmean\" /\"clustermean\", data.frame data.table user's specified reference grid consisting combinations covariates predictions made. User's specified reference grid possible simple substitution. Single level models default \"grandmean\". level character string vector. estimate multilevel models focus \"\" /\"within\" \"aggregate\" variance? Single-level models default \"aggregate\". weight character value specifying weight use calculation reference composition. \"equal\", give equal weight units (e.g., individuals). \"proportional\", weights proportion frequencies units averaged (e.g., observations across individuals). Default \"equal\" ref = \"grandmean\" \"proportional\" ref = \"clustermean\". scale Either \"response\" \"linear\". \"response\", results returned scale response variable. \"linear\", results returned scale linear predictor term, without applying inverse link function transformations. cores Number cores use executing chains parallel, recommend setting mc.cores option many processors hardware RAM allow (number compositional parts). non-Windows OS non-interactive R sessions, forking used instead PSOCK clusters. ... currently ignored.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/substitution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multilevel Compositional Substitution Analysis — substitution","text":"list containing results multilevel compositional substitution model. first six lists contain results substitution estimation compositional part. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. Reference Either grandmean, clustermean, users.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/substitution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multilevel Compositional Substitution Analysis — substitution","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){   cilr <- complr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                  idvar = \"ID\", total = 1440)    # model with compositional predictor at between and between-person levels of variance   fit1 <- brmcoda(complr = cilr,                   formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                                      wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),                   chain = 1, iter = 500, backend = \"cmdstanr\")   sub1 <- substitution(object = fit1, delta = 5, level = c(\"between\", \"within\"))    # model with compositional predictor at aggregate level of variance   fit2 <- brmcoda(complr = cilr,                   formula = Stress ~ ilr1 + ilr2 + ilr3 + ilr4 + (1 | ID),                   chain = 1, iter = 500, backend = \"cmdstanr\")   sub2 <- substitution(object = fit2, delta = 5, level = c(\"aggregate\"))  }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/summary.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Summary of a fitted brmsfit model in a brmcoda object — summary.brmcoda","title":"Create a Summary of a fitted brmsfit model in a brmcoda object — summary.brmcoda","text":"Create Summary fitted brmsfit model brmcoda object","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/summary.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Summary of a fitted brmsfit model in a brmcoda object — summary.brmcoda","text":"","code":"# S3 method for brmcoda summary(object, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/summary.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Summary of a fitted brmsfit model in a brmcoda object — summary.brmcoda","text":"object object class brmcoda. ... arguments passed summary.brmsfit.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/summary.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Summary of a fitted brmsfit model in a brmcoda object — summary.brmcoda","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){   m <- brmcoda(complr = complr(data = mcompd, sbp = sbp,                                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                                  idvar = \"ID\", total = 1440),   formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +     wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),   chain = 1, iter = 500,   backend = \"cmdstanr\")      summary(m) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/summary.complr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Summary of a complr object — summary.complr","title":"Create a Summary of a complr object — summary.complr","text":"Create Summary complr object","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/summary.complr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Summary of a complr object — summary.complr","text":"","code":"# S3 method for complr summary(object, weight = c(\"equal\", \"proportional\"), ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/summary.complr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Summary of a complr object — summary.complr","text":"object object class complr. weight character value specifying weight use calculation reference composition. \"equal\", give equal weight units (e.g., individuals). \"proportional\", weights proportion frequencies units averaged (e.g., observations across individuals). Default equal. ... generic argument, use.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/summary.complr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Summary of a complr object — summary.complr","text":"","code":"cilr <- complr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                 idvar = \"ID\") summary(cilr) #>                                               #> composition_parts    TST, WAKE, MVPA, LPA, SB #> logratios              ilr1, ilr2, ilr3, ilr4 #> idvar                                    NULL #> nobs                                     3540 #> ngrps                                     266 #> transform_type                            ilr #> total                                       1 #> composition_geometry                    acomp #> logratio_class                          rmult"},{"path":"https://florale.github.io/multilevelcoda/reference/summary.substitution.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Summary of a Substitution Model represented by a substitution object — summary.substitution","title":"Create a Summary of a Substitution Model represented by a substitution object — summary.substitution","text":"Create Summary Substitution Model represented substitution object","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/summary.substitution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Summary of a Substitution Model represented by a substitution object — summary.substitution","text":"","code":"# S3 method for substitution summary(object, delta, to, from, ref, level, digits = 2, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/summary.substitution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Summary of a Substitution Model represented by a substitution object — summary.substitution","text":"object substitution class object. delta integer, numeric value vector indicating desired delta substitution results summarised. Default delta available substitution object. character value vector specifying names compositional parts reallocated model. character value vector specifying names compositional parts reallocated model. ref Either character value vector ((\"grandmean\" /\"clustermean\" \"users\"), Default ref available substitution object. level character string vector (\"\" /\"within\"). Default level available substitution object. digits integer value used number formatting. Default 2. ... generic argument, use.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/summary.substitution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Summary of a Substitution Model represented by a substitution object — summary.substitution","text":"summary substitution object. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. Either within. Reference Either grandmean, clustermean, users.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/summary.substitution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Summary of a Substitution Model represented by a substitution object — summary.substitution","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){   ## fit a model with compositional predictor at between and between-person levels   m <- brmcoda(complr = complr(data = mcompd, sbp = sbp,                                parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                                idvar = \"ID\", total = 1440),   formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +     wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),   chain = 1, iter = 500,   backend = \"cmdstanr\")      subm <- substitution(object = m, delta = 5)   summary(subm) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/update.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Update brmcoda models — update.brmcoda","title":"Update brmcoda models — update.brmcoda","text":"method allows updating existing brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/update.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update brmcoda models — update.brmcoda","text":"","code":"# S3 method for brmcoda update(object, formula. = NULL, newdata = NULL, newcomplr = NULL, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/update.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update brmcoda models — update.brmcoda","text":"object fitted brmcoda object updated. formula. Changes formula; details see update.formula brmsformula. newdata data.frame data.table containing data variables used analysis. must include composition ID variable existing complr object. newcomplr complr object containing data composition, ILR coordinates, variables used updated model. ... arguments passed brm.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/update.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update brmcoda models — update.brmcoda","text":"brmcoda two elements complr object class complr used brm model. model object class brmsfit, contains posterior draws along many useful information model.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/update.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update brmcoda models — update.brmcoda","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){  # model with compositional predictor at between and within-person levels fit <- brmcoda(complr = complr(data = mcompd, sbp = sbp,                                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                                 idvar = \"ID\"),                formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                                  wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),                chain = 1, iter = 500,               backend = \"cmdstanr\")  # removing the effect of wilr1 fit1 <- update(fit, formula. = ~ . - wilr1)  # using only a subset fit2 <- update(fit, newdata = mcompd[ID != 1]) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/update.complr.html","id":null,"dir":"Reference","previous_headings":"","what":"Update complr — update.complr","title":"Update complr — update.complr","text":"method allows updating existing complr object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/update.complr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update complr — update.complr","text":"","code":"# S3 method for complr update(object, newdata, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/update.complr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update complr — update.complr","text":"object complr class object updated. newdata data.frame data.table containing data variables used analysis. must include composition ID variable existing complr object. ... generic argument, use.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/update.complr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update complr — update.complr","text":"complr object least following elements. comp vector class acomp representing one closed composition matrix class acomp representing multiple closed  compositions one row. between_comp vector class acomp representing one closed -person composition matrix class acomp representing multiple closed -person compositions one row. within_comp vector class acomp representing one closed within-person composition matrix class acomp representing multiple closed within-person compositions one row. logratio Log ratio transform composition. between_logratio Log ratio transform -person composition. within_logratio Log ratio transform within-person composition. data user's dataset imputed dataset input data contains zeros. transform Type transform applied compositional data. parts Names compositional variables. idvar Name variable containing IDs. total Total amount compositions closed.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/update.complr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update complr — update.complr","text":"","code":"cilr <- complr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\")  # update with new data newdat <- mcompd[ID != 1] # excluding ID 1 cilr1 <- update(object = cilr, newdata = newdat)"},{"path":"https://florale.github.io/multilevelcoda/reference/var.complr.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of compositions presented in a complr object. — var.complr","title":"Variance of compositions presented in a complr object. — var.complr","text":"Variance compositions presented complr object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/var.complr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance of compositions presented in a complr object. — var.complr","text":"","code":"var.complr(x, weight = c(\"equal\", \"proportional\"), ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/var.complr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance of compositions presented in a complr object. — var.complr","text":"x object class complr. weight character value specifying weight use calculation reference composition. \"equal\", give equal weight units (e.g., individuals). \"proportional\", weights proportion frequencies units averaged (e.g., observations across individuals) Default equal. ... generic argument, use.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/var.complr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance of compositions presented in a complr object. — var.complr","text":"","code":"cilr <- complr(data = mcompd, sbp = sbp,                  parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                  idvar = \"ID\") var.complr(cilr) #> $comp #>            TST      WAKE      MVPA       LPA        SB #> TST  0.0000000 0.5024484 0.6926664 0.1919296 0.5194616 #> WAKE 0.5024484 0.0000000 1.1437040 0.5940452 1.0423563 #> MVPA 0.6926664 1.1437040 0.0000000 0.6253969 1.5293591 #> LPA  0.1919296 0.5940452 0.6253969 0.0000000 0.6295438 #> SB   0.5194616 1.0423563 1.5293591 0.6295438 0.0000000 #>  #> $between_comp #>             bTST     bWAKE     bMVPA       bLPA       bSB #> bTST  0.00000000 0.2407008 0.2146939 0.06573977 0.1677550 #> bWAKE 0.24070082 0.0000000 0.4651665 0.27222554 0.4910121 #> bMVPA 0.21469390 0.4651665 0.0000000 0.19850554 0.4266513 #> bLPA  0.06573977 0.2722255 0.1985055 0.00000000 0.2176890 #> bSB   0.16775502 0.4910121 0.4266513 0.21768902 0.0000000 #>  #> $within_comp #>            wTST     wWAKE     wMVPA      wLPA       wSB #> wTST  0.0000000 0.2586842 0.4830112 0.1370678 0.3806805 #> wWAKE 0.2586842 0.0000000 0.6682370 0.3236164 0.5936233 #> wMVPA 0.4830112 0.6682370 0.0000000 0.4469771 1.0507794 #> wLPA  0.1370678 0.3236164 0.4469771 0.0000000 0.4636737 #> wSB   0.3806805 0.5936233 1.0507794 0.4636737 0.0000000 #>"},{"path":"https://florale.github.io/multilevelcoda/reference/vcov.brmcoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariance and Correlation Matrix of Population-Level Effects — vcov.brmcoda","title":"Covariance and Correlation Matrix of Population-Level Effects — vcov.brmcoda","text":"Get point estimate covariance correlation matrix population-level parameters brmsfit object brmcoda object.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/vcov.brmcoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariance and Correlation Matrix of Population-Level Effects — vcov.brmcoda","text":"","code":"# S3 method for brmcoda vcov(object, ...)"},{"path":"https://florale.github.io/multilevelcoda/reference/vcov.brmcoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariance and Correlation Matrix of Population-Level Effects — vcov.brmcoda","text":"object object class brmcoda. ... arguments passed vcov.brmsfit.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/vcov.brmcoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariance and Correlation Matrix of Population-Level Effects — vcov.brmcoda","text":"covariance correlation matrix population-level parameters","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/vcov.brmcoda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariance and Correlation Matrix of Population-Level Effects — vcov.brmcoda","text":"","code":"# \\donttest{ ## fit a model if(requireNamespace(\"cmdstanr\")){   m <- brmcoda(complr = complr(data = mcompd, sbp = sbp,                                parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"),                                idvar = \"ID\", total = 1440),   formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +     wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),   chain = 1, iter = 500,   backend = \"cmdstanr\")      vcov(m) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":null,"dir":"Reference","previous_headings":"","what":"Within-person Simple Substitution — wsub","title":"Within-person Simple Substitution — wsub","text":"function alias substitution estimates difference outcome compositional parts substituted specific unit(s) within level using single reference composition (e.g., compositional mean sample level). recommended users run substitution model using substitution function.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Within-person Simple Substitution — wsub","text":"","code":"wsub(   object,   basesub,   delta,   summary = TRUE,   ref = \"grandmean\",   level = \"within\",   weight = \"equal\",   scale = c(\"response\", \"linear\"),   cores = NULL,   ... )"},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Within-person Simple Substitution — wsub","text":"object fitted brmcoda object. basesub data.frame data.table base possible substitution compositional parts. data set can computed using function basesub. NULL, possible pairwise substitution compositional parts used. delta integer, numeric value vector indicating amount substituted change compositional parts. summary logical value. estimate level reference grid (FALSE) average (TRUE) returned? Default TRUE. applicable model covariates addition isometric log-ratio coordinates (.e., adjusted model). ref Either character value vector dataset. Can \"grandmean\" /\"clustermean\", data.frame data.table user's specified reference grid consisting combinations covariates predictions made. User's specified reference grid possible simple substitution. Single level models default \"grandmean\". level character string vector. estimate multilevel models focus \"\" /\"within\" \"aggregate\" variance? Single-level models default \"aggregate\". weight character value specifying weight use calculation reference composition. \"equal\", give equal weight units (e.g., individuals). \"proportional\", weights proportion frequencies units averaged (e.g., observations across individuals). Default \"equal\" ref = \"grandmean\" \"proportional\" ref = \"clustermean\". scale Either \"response\" \"linear\". \"response\", results returned scale response variable. \"linear\", results returned scale linear predictor term, without applying inverse link function transformations. cores Number cores use executing chains parallel, recommend setting mc.cores option many processors hardware RAM allow (number compositional parts). non-Windows OS non-interactive R sessions, forking used instead PSOCK clusters. ... currently ignored.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Within-person Simple Substitution — wsub","text":"list containing results multilevel compositional substitution model. first six lists contain results substitution estimation compositional part. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. Reference Either grandmean, clustermean, users.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/wsub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Within-person Simple Substitution — wsub","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){  cilr <- complr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\", total = 1440)  # model with compositional predictor at between and within-person levels m <- brmcoda(complr = cilr,               formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                                  wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),               chain = 1, iter = 500,              backend = \"cmdstanr\")               subm <- wsub(object = m, basesub = psub, delta = 60) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":null,"dir":"Reference","previous_headings":"","what":"Within-person Average Substitution — wsubmargins","title":"Within-person Average Substitution — wsubmargins","text":"function alias substitution estimates difference outcome compositional parts substituted specific unit(s) within level using cluster mean (e.g., compositional mean individual level) reference composition. recommended users run substitution model using substitution function.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Within-person Average Substitution — wsubmargins","text":"","code":"wsubmargins(   object,   delta,   basesub,   ref = \"clustermean\",   level = \"within\",   weight = \"proportional\",   scale = c(\"response\", \"linear\"),   cores = NULL,   ... )"},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Within-person Average Substitution — wsubmargins","text":"object fitted brmcoda object. delta integer, numeric value vector indicating amount substituted change compositional parts. basesub data.frame data.table base possible substitution compositional parts. data set can computed using function basesub. NULL, possible pairwise substitution compositional parts used. ref Either character value vector dataset. Can \"grandmean\" /\"clustermean\", data.frame data.table user's specified reference grid consisting combinations covariates predictions made. User's specified reference grid possible simple substitution. Single level models default \"grandmean\". level character string vector. estimate multilevel models focus \"\" /\"within\" \"aggregate\" variance? Single-level models default \"aggregate\". weight character value specifying weight use calculation reference composition. \"equal\", give equal weight units (e.g., individuals). \"proportional\", weights proportion frequencies units averaged (e.g., observations across individuals). Default \"equal\" ref = \"grandmean\" \"proportional\" ref = \"clustermean\". scale Either \"response\" \"linear\". \"response\", results returned scale response variable. \"linear\", results returned scale linear predictor term, without applying inverse link function transformations. cores Number cores use executing chains parallel, recommend setting mc.cores option many processors hardware RAM allow (number compositional parts). non-Windows OS non-interactive R sessions, forking used instead PSOCK clusters. ... currently ignored.","code":""},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Within-person Average Substitution — wsubmargins","text":"list containing results multilevel compositional substitution model. first six lists contain results substitution estimation compositional part. Mean Posterior means. CI_low CI_high 95% credible intervals. Delta Amount substituted across compositional parts. Compositional part substituted . Compositional parts substituted . Level Level changes composition takes place. Reference Either grandmean, clustermean, users.","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/reference/wsubmargins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Within-person Average Substitution — wsubmargins","text":"","code":"# \\donttest{ if(requireNamespace(\"cmdstanr\")){  cilr <- complr(data = mcompd, sbp = sbp,                 parts = c(\"TST\", \"WAKE\", \"MVPA\", \"LPA\", \"SB\"), idvar = \"ID\", total = 1440)  # model with compositional predictor at between and within-person levels m <- brmcoda(complr = cilr,               formula = Stress ~ bilr1 + bilr2 + bilr3 + bilr4 +                                  wilr1 + wilr2 + wilr3 + wilr4 + (1 | ID),               chain = 1, iter = 500,              backend = \"cmdstanr\")                       subm <- wsubmargins(object = m, basesub = psub, delta = 5) }# } #> Error: CmdStan path has not been set yet. See ?set_cmdstan_path."},{"path":[]},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/news/index.html","id":"multilevelcoda-100","dir":"Changelog","previous_headings":"","what":"multilevelcoda 1.0.0","title":"multilevelcoda 1.0.0","text":"CRAN release: 2023-01-13","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/news/index.html","id":"multilevelcoda-110","dir":"Changelog","previous_headings":"","what":"multilevelcoda 1.1.0","title":"multilevelcoda 1.1.0","text":"CRAN release: 2023-06-16","code":""},{"path":"https://florale.github.io/multilevelcoda/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"multilevelcoda 1.1.0","text":"Add method update support update existing compilr brmcoda objects. Add method summary substitution summarise output produced function substitution. Add argument weight substitution allow different methods calculating reference compostion. Add user control specifying reference composition reference grid substitution model. Ensure complir throws errors missing data 0s input compositional data.","code":""},{"path":"https://florale.github.io/multilevelcoda/news/index.html","id":"other-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"multilevelcoda 1.1.0","text":"Deprecate argument type substitution replace ref. Deprecate argument regrid substitution","code":""},{"path":"https://florale.github.io/multilevelcoda/news/index.html","id":"multilevelcoda-120","dir":"Changelog","previous_headings":"","what":"multilevelcoda 1.2.0","title":"multilevelcoda 1.2.0","text":"CRAN release: 2023-08-12","code":""},{"path":"https://florale.github.io/multilevelcoda/news/index.html","id":"new-features-1-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"multilevelcoda 1.2.0","text":"Add various methods compilr, brmcoda, substitution objects. Change default total compilr 1 instead 1440.","code":""},{"path":"https://florale.github.io/multilevelcoda/news/index.html","id":"other-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"multilevelcoda 1.2.0","text":"Fix bugs vignettes reformat. Add new vignette present case study multilevelcoda simulation study.","code":""},{"path":"https://florale.github.io/multilevelcoda/news/index.html","id":"multilevelcoda-121","dir":"Changelog","previous_headings":"","what":"multilevelcoda 1.2.1","title":"multilevelcoda 1.2.1","text":"CRAN release: 2023-08-13","code":""},{"path":"https://florale.github.io/multilevelcoda/news/index.html","id":"other-changes-1-2-1","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"multilevelcoda 1.2.1","text":"Fix bug summary argument predict() fitted().","code":""},{"path":[]},{"path":"https://florale.github.io/multilevelcoda/news/index.html","id":"new-features-1-2-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"multilevelcoda 1.2.2","text":"Add new function multilevelcoda_sim() bundle simulation study results shiny app. Add methods brmcoda (loo pp_check).","code":""}]
